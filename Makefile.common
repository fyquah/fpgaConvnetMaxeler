####################################################
#       Makefile ------- Thomas Chau 2013          #
#       Tested for MaxCompiler 2013.2.2            #
####################################################
# 1)    For SLiC interface only
#       If you are using MaxCompilerRT,
#       use maxfilecompile instead of sliccompile
#       and change LFLAGS -lslic to -lmaxcompilerrt
# 2)    This makefile depends on project-specific
#       settings defined in project's Makefile
# 3)    Usage: use project's makefile (navigate
#       to project's directory and use makefile there)
#

# ---- Common Configuration Defaults ----

NUMDEVICES ?= 1

# ---- Paths ----
ifndef $(MAXCOMPILER_BUILD_DIR)
	MAXCOMPILER_BUILD_DIR=.
endif
SIMMAXDIR=$(MAXCOMPILER_BUILD_DIR)/$(PRJ)_$(DFEModel)_DFE_SIM/results
DFEMAXDIR=$(MAXCOMPILER_BUILD_DIR)/$(PRJ)_$(DFEModel)_DFE/results
MAXELEROSDIR_SIM:=$(MAXCOMPILERDIR)/lib/maxeleros-sim

# ---- Source files ----
ENGINEFILES=$(wildcard ../src/*.maxj)
CPUFILES=$(wildcard ../src/*.c ../src/*.cpp)

# ---- Compiler settings ----

# detect the language: do we have .cpp extensions?
ifneq ($(findstring cpp, $(CPUFILES)), )
    # language: C++
    CXX ?= icpc
    CPUCOMPILER = $(CXX)

    # Assuming CXX points to g++/c++ by default
    COMPILER_CFLAGS = -fopenmp
    OPT_FLAGS = -march=native -O3

    ifeq ($(CXX), icpc)
      COMPILER_CFLAGS = -openmp
      OPT_FLAGS = -xHost -O3
    endif
else
    # language: C
    CC ?= icc
    CPUCOMPILER = $(CC)

    # Assuming CC points to gcc/cc by default
    COMPILER_CFLAGS = -std=c99 -fopenmp
    OPT_FLAGS = -march=native -O3

    ifeq ($(CC), icc)
      COMPILER_CFLAGS = -std=c99 -openmp
      OPT_FLAGS = -xHost -O3
    endif
endif


# ---- Command alias ----


MAXFILECOMPILE=maxfilecompile
SLICCOMPILE=sliccompile
MAXGUESSBUILDDIR=maxGuessBuildDir
MAXFILESTITCH=maxfilestitch
MAXJAVARUN=maxJavaRun
MAXJC=maxjc
MAXDEBUG=maxdebug
MAXRENDERGRAPHS=maxRenderGraphs
MAXCOMPILERSIM=maxcompilersim

MAXOS_HW=/opt/maxeler/maxeleros/lib/libmaxeleros.so
MAXOS_SIM=$(MAXELEROSDIR_SIM)/lib/libmaxeleros.so

CP='$(HOME)/dfe-snippets/lib/maxpower.jar'
JFLAGS=-cp '$(MAXCOMPILERDIR)/lib/MaxCompiler.jar:$(CP)' -1.6 -d .
CFLAGS= $(COMPILER_CFLAGS) $(OPT_FLAGS) -Wall -I${MAXCOMPILERDIR}/include -I${MAXCOMPILERDIR}/include/slic -I${MAXELEROSDIR}/include -D_XOPEN_SOURCE=600
LFLAGS=-L${MAXCOMPILERDIR}/lib -L${MAXELEROSDIR}/lib -lmaxeleros -lslic -lm -lpthread

# Add this on the command line to pass to make when compiling
# Useful for debug/optimization flags
EXTRA_CFLAGS?=

# This is set in the gdbsim/gdbdfe targets
DEBUG_FLAGS?=

ALL_FLAGS = $(CFLAGS) $(EXTRA_CFLAGS) $(DEBUG_FLAGS)
# ---- Default DFE ----
DFEID=/dev/maxeler0

# Files to remove on clean
TRASH=*~ ../src/*~ *.o
DIST_TRASH=Maxfiles.h *.class *.o debug* *.dot *.png

help:
	@ echo "Current configuration:"
	@ echo "   Compiler       $(CC)"
	@ echo "   Optimizations  $(OPT_FLAGS)"
	@ echo "   MAXCOMPILERDIR $(MAXCOMPILERDIR)"
	@ echo ""
	@ echo "Available targets: "
	@ echo "   runsim   -- build and run design in simulation (requires MaxCompiler license)"
	@ echo "   stopsim  -- stop the currently running simulated device"
	@ echo "   build    -- build the design in hardware (requires MaxCompiler license)"
	@ echo "   run      -- run design in hardware (requires local access to a DFE)"
	@ echo "   debug    -- debug a simulation design using MaxDebug"
	@ echo "   debughw  -- debug a hardware design using MaxDebug (requires local access to DFE)"
	@ echo "   gdbsim, gdbdfe -- build CPU code with debug symbols"
	@ echo "   cleansim, cleandfe, clean -- clean executables for simulation, hardware or both"
	@ echo "   distcleansim, distcleanhw, distclean -- delete the entire sim, hw or both directories"
	@ echo "   help     -- print this help message"


all: runsim build

.PHONY: stopsim run cleansim cleandfe debug debughw

# Use various targets for resource benchmarking
include $(WHEREISROOT)/Makefile.resource.benchmark

# ---- shared ----

RESOURCE_BENCH_HELPERS=resource_bench_helper.cpp resource_bench_helper.h
$(RESOURCE_BENCH_HELPERS):
	python ../scripts/generate_resource_benchmarks.py

# ---- Simulation ----

resource_bench_simc.o: $(CPUFILES) $(RESOURCE_BENCH_HELPERS) $(RESOURCE_BENCH_SIM_MAXFILES)
	$(CPUCOMPILER) resource_bench_helper.cpp $(ALL_FLAGS) $(RESOURCE_BENCH_SIM_INCLUDE_FLAGS) -I$(MAXCOMPILER_BUILD_DIR) -I$(SIMMAXDIR) -D__SIM__ -DDESIGN_NAME=$(PRJ) -c -o resource_bench_helper.o
	$(CPUCOMPILER) $< $(ALL_FLAGS) $(RESOURCE_BENCH_SIM_INCLUDE_FLAGS) -I$(MAXCOMPILER_BUILD_DIR) -I$(SIMMAXDIR) -D__SIM__ -DDESIGN_NAME=$(PRJ) -c -o $@

resource_bench_sim: resource_bench_simc.o $(RESOURCE_BENCH_SIM_SLIC_OBJECT_FILES)
	$(CPUCOMPILER) $(ALL_FLAGS) -o $@ $^ resource_bench_helper.o $(LFLAGS)

run_resource_bench_sim: resource_bench_sim
	$(MAXCOMPILERSIM) -n $(USER)a -c$(DEVICENUM) -d$(NUMDEVICES) restart
	SLIC_CONF+="use_simulation=$(USER)a" LD_PRELOAD=$(MAXOS_SIM) ./$< $(USER)a0:$(USER)a
	make stopsim

stopsim:
	$(MAXCOMPILERSIM) -n $(USER)a -c$(DEVICENUM) stop

gdbsim:
	DEBUG_FLAGS="-O0 -g" make $(PRJ)_sim
	LD_PRELOAD=$(MAXOS_SIM) gdb $(PRJ)_sim

test_blas_sim: ../src/feedforward.cpp ../src/test_blas.cpp
	g++ $^ -D__SIM__ -o $@
	./$@

# ---- DFE ----

resource_bench_dfec.o: $(CPUFILES) $(RESOURCE_BENCH_HELPERS) $(RESOURCE_BENCH_MAXFILES)
	$(CPUCOMPILER) resource_bench_helper.cpp $(ALL_FLAGS) $(RESOURCE_BENCH_SIM_INCLUDE_FLAGS) \
	    -I$(MAXCOMPILER_BUILD_DIR) -DDESIGN_NAME=$(PRJ) -c -o resource_bench_helper.o
	$(CPUCOMPILER) $< $(ALL_FLAGS) $(RESOURCE_BENCH_INCLUDE_FLAGS) -I$(MAXCOMPILER_BUILD_DIR) -DDESIGN_NAME=$(PRJ) -c -o $@

resource_bench_dfe: resource_bench_dfec.o $(RESOURCE_BENCH_SLIC_OBJECT_FILES)
	$(CPUCOMPILER) $(ALL_FLAGS) -o $@ $^ resource_bench_helper.o $(LFLAGS)

run_resource_bench: resource_bench_dfe
	SLIC_CONF=$(SLIC_CONF) LD_PRELOAD=$(MAXOS_HW) ./resource_bench_dfe

test_blas: ../src/feedforward.cpp ../src/test_blas.cpp
	g++ $^ -I ~/OpenBLAS/lapack-netlib/CBLAS/include -L ~/OpenBLAS -o $@
	LD_LIBRARY_PATH="~/OpenBLAS:$$LD_LIBRARY_PATH" ./$@

gdbdfe:
	DEBUG_FLAGS="-O0 -g" make build
	LD_PRELOAD=$(MAXOS_HW) gdb $(PRJ)_dfe

# ---- Clean ----

cleansim:
	rm resource_helper.cpp resource_helper.h
	rm -f $(PRJ)_sim $(TRASH)

cleandfe:
	rm -f $(PRJ)_dfe $(TRASH)

clean:
	# deleting everything except the Makefile in the build/ directory
	find . ! -name 'Makefile' -type f -exec rm -f {} + 

distcleansim: cleansim
	rm -rf $(DIST_TRASH) $(PRJ)_$(DFEModel)_DFE_SIM

distcleandfe: cleandfe
	rm -rf $(DIST_TRASH) $(PRJ)_$(DFEModel)_DFE

distclean: distcleansim distcleandfe

# ---- Debug ----

debug:
	maxdebug -v -g $(PRJ)Graph -s $(PRJ)Graph -c -k $(KERNEL) -d $(USER)a0:$(USER)a $(SIMMAXDIR)/$(PRJ).max

debughw:
	maxdebug -v -g $(PRJ)Graph -s $(PRJ)Graph -c -k $(KERNEL) -d $(DFEID) $(DFEMAXDIR)/$(PRJ).max
