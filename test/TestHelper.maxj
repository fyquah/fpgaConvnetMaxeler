import java.util.ArrayList;
import java.util.List;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class TestHelper {

    public static Bits negateBits(Bits x) {
        Bits y = Bits.allZeros(x.getWidth());;

        for (int i = 0 ; i < x.getWidth() ; i++) {
            y.setBit(i, !x.getBit(i));
        }

        int idx = 0;

        do {
            if (y.getBit(idx)) {
                y.setBit(idx, false);
            } else {
                y.setBit(idx, true);
                break;
            }
            idx += 1;
        } while (idx < x.getWidth());

        return y;
    }


    public static float rand() {
        return (float) (((Math.random() - 0.5) * 1));
    }

    public static Bits doubleToBits(double arg) {
        double x = Math.abs(arg);
        Bits ret = Bits.allZeros(GlobalConfig.fracBits + GlobalConfig.intBits);

        double top = Math.pow(2, GlobalConfig.intBits - 2);

        for (int i = GlobalConfig.fracBits + GlobalConfig.intBits - 2 ; i >= 0; i--) {
            if (top < x) {
                x = x - top;
                ret.setBit(i, true);
            }

            top = top / 2;
        }

        // Handle negative case
        if (arg < 0) {
           return negateBits(ret); 
        }

        return ret;
    }


    public static List<Bits> toBitsList (List<Float> input, int inputChannels) {
        List<Bits> ret = new ArrayList<Bits>();

        for (int i = 0 ; i < input.size() / inputChannels ; i++) {
            Bits[] bitsArr = new Bits[inputChannels];

            for (int j = 0 ; j < inputChannels ; j++) {
                int idx = i * inputChannels + j;
                bitsArr[j] = doubleToBits((double) input[idx]);
            }

            ret.add(concatBits(bitsArr));
        }

        return ret;
    }

    public static List<Float> fromBitsList(List<Bits> output, int outputChannels) {
        List<Float> ret = new ArrayList<Float>();

        for (int i = 0 ; i < output.size() ; i++) {
            for (int j = 0 ; j < outputChannels ; j++) {
                int totalBits = GlobalConfig.intBits + GlobalConfig.fracBits;
                Bits b = subBits(output[i], j * totalBits, totalBits);
                ret.add((float) Utils.bitsToDouble(b));
            }
        }

        return ret;
    }

    public static Bits subBits(Bits bits, int start, int len) {
        Bits ret = Bits.allZeros(len);

        for (int i = 0 ; i < len ; i++) {
            if (bits.getBit(start + i)) {
                ret.setBit(i, true);
            }
        }

        return ret;
    }

    public static Bits concatBits(Bits[] bitsArr) {
        int width = 0;
        for (int i = 0;  i < bitsArr.length ; i++) {
            width += bitsArr[i].getWidth();
        }

        Bits ret = Bits.allZeros(width);

        int idx = 0;

        for (int i = 0 ; i < bitsArr.length ; i++) {
            for (int j = 0 ; j < bitsArr[i].getWidth() ; j++) {
                ret.setBit(idx, bitsArr[i].getBit(j));
                idx++;
            }
        }

        return ret;
    }

    public static void printList(String name, List<Float> l) {
        printList(name, l, 5);
    }

    public static void printList(String name, List<Float> l, int max) {
        System.out.print(name + " = ");
        for (int i = 0 ; i < Math.min(max, l.size()) ; i++) {
            System.out.print(l[i] + " ");
        }
        System.out.println("...");
    }

    public static List<Float> randomFloatVector(int length) {
        List<Float> ret = new ArrayList<Float>();

        for (int i = 0 ; i < length ; i++) {
            ret.add(rand() * 0.01f);
        }

        return ret;
    }

}
