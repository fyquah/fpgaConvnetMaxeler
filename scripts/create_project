#!/usr/bin/env python

import argparse
import filecmp
import os
import parser
import shutil
import string
import sys


BASE_DIR = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..")
TEMPLATES_DIR = os.path.join(
	os.path.dirname(os.path.realpath(__file__)), "../templates")

permitted_dfe_models = ("MAIA", "AWSF1", "MAX5")

parser = argparse.ArgumentParser(
        description=("Create new project with the given net descriptor."
                     " This script can accept one or more nets."))
parser.add_argument("name", type=str,
		    help="Name of project")
parser.add_argument("--nets", type=str, nargs="+",
                    help="list of net descriptors to be added in the project.",
		    required=True)
parser.add_argument("--dfe-model", type=str,
                    help="DFE Model " + ",".join(permitted_dfe_models),
		    required=True)
parser.add_argument("--dir", type=str, required=True,
		    help="directory of the project")
parser.add_argument("--max-ring",
                    dest="max_ring",
                    action="store_true",
                    help=("Generate a max ring project that optimizes over"
                          " multiple FPGA."))


def slurp(filename):
    with open(filename, "r") as f:
	return f.read()


def mkdir_if_not_exist(dir):
    if not os.path.exists(dir):
	os.makedirs(dir)


def main(argv):
    if FLAGS.dfe_model not in permitted_dfe_models:
        raise RuntimeError(str(FLAGS.dfe_model) + " is not a recognised dfe model!")

    if not os.path.exists(FLAGS.dir):
	os.makedirs(FLAGS.dir)

    mkdir_if_not_exist(os.path.join(FLAGS.dir, "descriptors"))
    for src_filename in FLAGS.nets:
	dest_filename = os.path.join(FLAGS.dir, "descriptors",
				     os.path.basename(src_filename))
	if (not os.path.exists(dest_filename)
		or not filecmp.cmp(dest_filename, src_filename)):
	    shutil.copyfile(src_filename, dest_filename)

    mkdir_if_not_exist(os.path.join(FLAGS.dir, "src"))
    with open(os.path.join(FLAGS.dir, "src/main.cpp"), "w") as f:
	s = string.Template(
		slurp(os.path.join(TEMPLATES_DIR, "main.template.cpp")))
	contents = s.substitute(prj=FLAGS.name, init_fn=FLAGS.name + "_init")
	f.write(contents)

    mkdir_if_not_exist(os.path.join(FLAGS.dir, "build"))
    with open(os.path.join(FLAGS.dir, "build/Makefile"), "w") as f:
        if FLAGS.max_ring:
            template_file_name = "Makefile.multi.fpga.template"
        else:
            template_file_name = "Makefile.template"

        contents = slurp(
                os.path.join(TEMPLATES_DIR, template_file_name)).format(
                    dfemodel=FLAGS.dfe_model,
                    prj=FLAGS.name,
                    PRJ=FLAGS.name.upper(),
                    WHEREISROOT=os.path.relpath(
                        BASE_DIR,
                        os.path.join(FLAGS.dir, "build")))
	f.write(contents)


if __name__ == "__main__":
    FLAGS = parser.parse_args()
    main(sys.argv)
