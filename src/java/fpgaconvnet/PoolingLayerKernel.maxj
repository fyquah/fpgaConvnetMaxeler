package fpgaconvnet;

import java.util.List;
import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

import fpgaconvnet.lib.StrideCounter;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.PoolingParameter;


public class PoolingLayerKernel extends Kernel {
    Dimension inputDimension, outputDimension;
    int poolingDim;
    int stride;
    PoolingParameter.PoolingType poolingType;
    PoolingUnit[] poolingUnits;
    DFEVectorType<DFEVar> outputType, inputType;
    LayerParameter layerParams;

    public int cyclesPerImage() {
        return inputDimension.height() * inputDimension.width();
    }

    public PoolingLayerKernel(KernelParameters kp, LayerParameter argLayerParams) {
        super(kp);

        // Parameters from PoolingParameters
        layerParams = argLayerParams;
        inputDimension = new Dimension(
                layerParams.getInputHeight(),
                layerParams.getInputWidth(),
                layerParams.getNumInputs());
        poolingDim = layerParams.getPool().getDim();
        outputDimension = new Dimension(
                layerParams.getOutputHeight(),
                layerParams.getOutputWidth(),
                layerParams.getNumOutputs());
        poolingType = layerParams.getPool().getType();
        stride = layerParams.getPool().getStride();
        // end of extracted parameters

        // derived properties
        int nChannels = inputDimension.channels();
        outputType = new DFEVectorType<DFEVar>(GlobalConfig.dataType, nChannels);
        inputType = new DFEVectorType<DFEVar>(GlobalConfig.dataType, nChannels);

        poolingUnits = new PoolingUnit[inputDimension.channels()];

        DFEVector<DFEVar> input = inputType.newInstance(this);
        DFEVector<DFEVar> output = outputType.newInstance(this);

        // the frame that we want to consider for top left / top right pixels.
        CounterChain masterChain = control.count.makeCounterChain();
        DFEVar inputRow = Utils.chainCounterOrZero(this, masterChain, inputDimension.height());
        DFEVar inputCol = Utils.chainCounterOrZero(this, masterChain, inputDimension.width());

        DFEVar colStrideReset = inputCol.eq(0);
        DFEVar colStride = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(stride))
                .withMax(stride)
                .withReset(inputCol.eq(0)))
                // .withEnable(~colStrideReset))
                    .getCount();
        DFEVar rowStrideReset = inputRow.eq(0) & inputCol.eq(0);
        DFEVar rowStride = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(stride))
                .withMax(stride)
                .withInc(1)
                .withReset(inputCol.eq(0) & inputRow.eq(0))
                .withEnable(inputCol.eq(inputDimension.width() - 1)))
                    .getCount();

        inputRow.simWatch("input_row");
        inputCol.simWatch("input_col");
        rowStride.simWatch("row_stride");
        colStride.simWatch("col_stride");

        for (int i = 0 ; i < inputDimension.channels() ; i++) {
            poolingUnits[i] = new PoolingUnit(
                this,
                poolingType,
                inputDimension.height(),
                inputDimension.width(),
                poolingDim
            );
            poolingUnits[i].setInput(input[i]);



            if (layerParams.getActivation() == LayerParameter.Activation.None) {
                output[i] <== poolingUnits[i].output();

            } else if (layerParams.getActivation() == LayerParameter.Activation.Relu) {
                DFEVar x = poolingUnits[i].output();
                output[i] <== x > 0 ? x : 0;

            } else {
                throw new RuntimeException("Unsupported activation type");
            }
        }
        // end of dervived properties

        // set the kernel I/O interface
        input <== io.input("x", inputType);
        DFEVar outputFlag = rowStride.eq(0) & colStride.eq(0);

        if (layerParams.getIsLastLayer()) {
            /* Last layer - cast from fixed point to dfe float. */
            DFEVectorType<DFEVar> rawOutputVectorType = new DFEVectorType<DFEVar>(
                    GlobalConfig.cpuType, outputDimension.channels());
            io.output("y", output.cast(rawOutputVectorType), rawOutputVectorType, outputFlag);
        } else {
            io.output("y", output, outputType, outputFlag);
        }

        // debugging messages
        // String debug_s = "[";
        // List<Object> debugValues = new ArrayList<Object>();
        // for (int i = 0 ; i < inputDimension.channels() ; i++) {
        //      debug_s += "%.3f, ";
        //      debugValues.add(output[i]);
        // }
        // debug_s += "]";
        // debug.simPrintf(
        //         outputFlag,
        //         "PoolingLayerKernel[" + layer.getLayerId() + "] output = " + debug_s + "\n",
        //         debugValues.toArray(new Object[1]));
    }

    private DFEVar isBorder(DFEVar row, DFEVar col) {
        DFEVar flag = constant.var(dfeBool(), 0);
        final int kernelDim = layerParams.getPool().getDim();

        if (kernelDim % 2 == 1) {
            for (int i = 0 ; i < (layerParams.getPool().getDim() - 1) / 2 ; i++) {
                flag = flag | row.eq(i) | col.eq(i)
                        | row.eq(inputDimension.height() - 1 - i)
                        | col.eq(inputDimension.width() - 1 - i);
            }

            return flag;

        } else {
            // handle top and left first
            for (int i = 0 ; i < layerParams.getPool().getDim() / 2 ; i++) {
                flag = flag | row.eq(i) | col.eq(i);
            }

            // handle bottom and right
            for (int i = 0 ; i < (layerParams.getPool().getDim() / 2) - 1 ; i++) {
                flag = flag | row.eq(inputDimension.height() - 1 - i)
                        | col.eq(inputDimension.width() - 1 - i);
            }

            return flag;
        }
    }

}
