package fpgaconvnet.lib;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import fpgaconvnet.IterationCounter;
import fpgaconvnet.Utils;
import fpgaconvnet.kernels.ConvolutionUnitKernel;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;


public class LookAheadCounter extends KernelLib {

    private final IterationCounter ctr;
    private final DFEVar lookAhead;
    private final DFEVar weightUsage;
    private final DFEVar kernelIter;
    private final int weightsUsageCycles;
    private final LayerParameter layerParams;
    private final ConvolutionParameter convParams;

    public LookAheadCounter(ConvolutionUnitKernel kernel, LayerParameter argLayerParams) {
        super(kernel);
      
        layerParams = argLayerParams;
        convParams = layerParams.getConv();
        ctr = new IterationCounter(layerParams);
        weightsUsageCycles = ctr.getKernelIterations()
                * convParams.getBramFactor()
                / (convParams.getWorkerFactor() * convParams.getConvFoldingFactor());

        CounterChain chain = control.count.makeCounterChain();
        lookAhead = Utils.chainCounterOrZero(
                this, chain, layerParams.getConv().getLookAhead());
        weightUsage = Utils.chainCounterOrZero(this, chain, weightsUsageCycles);
        kernelIter = control.count.simpleCounter(
                Utils.ceilLog2(ctr.getKernelIterations()),
                ctr.getKernelIterations());
    }

    public DFEVar getWeightsInputFlag() {
        return lookAhead.eq(0);
    }

    public DFEVar getWriteEnable() {
        return lookAhead.eq(0);
    }

    public DFEVar getInputControlFlag() {
        /* Number of iterations to spend per channel. */
        final int channelIterations = ctr.getConvolutionIterations() * ctr.getKernelIterations();

        DFEVar channelIterBase = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(ctr.getTotalIterations()))
                .withInitValue(0l)
                .withInc(weightsUsageCycles)
                .withMax(channelIterations)
                .withEnable(lookAhead.eq(layerParams.getConv().getLookAhead() - 1)
                            & weightUsage.eq(weightsUsageCycles - 1))
            ).getCount();

        /* Defines the stage at which we are using a particular channel. */
        DFEVar channelIter = dfeUInt(32).newInstance(this);
        optimization.pushPipeliningFactor(0.0);
        channelIter = (weightUsage.eq(0)
                       ? channelIterBase
                       : modInc(stream.offset(channelIter, -1), channelIterations));
        optimization.popPipeliningFactor();

        return channelIter.eq(0);
    }

    private DFEVar modInc(DFEVar x, int cap) {
        return (x.eq(cap - 1) ? 0 : x + 1);
    }

    public DFEVar getOutputControlFlag() {
        return constant.var(dfeBool(), 1);
    }

    public DFEVar getPixelWriteEnable() {
        return getInputControlFlag();
    }

    public DFEVar getKernelIter() {
        return kernelIter;
    }

    public DFEVar getAddress() {
        return weightUsage;
    }
}
