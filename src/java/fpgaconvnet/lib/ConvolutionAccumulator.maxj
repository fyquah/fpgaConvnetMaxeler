package fpgaconvnet.lib;

import java.lang.RuntimeException;

import java.util.List;
import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

import fpgaconvnet.IterationCounter;
import fpgaconvnet.GlobalConfig;
import fpgaconvnet.Utils;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;


public class ConvolutionAccumulator extends KernelLib {

    private final List<DFEVector<DFEVar>> inputVectors;
    private final Memory<DFEVar> biasStore;  /* Used for reloading when not initializing. */
    private final LayerParameter layerParams;
    private final ConvolutionParameter convParams;
    private final DFEVectorType<DFEVar> inputVectorType;
    private final DFEVectorType<DFEVar> outputVectorType;
    private final IterationCounter ctr;
    private final DFEVar batchCounter;
    private final DFEVar biasInput;
    private final DFEVar isInitializingWeights;
    private final DFEVar enableSignal;
    private final DFEVar initWeightsFlag;
    private final DFEVar outputControlFlag;
    private final DFEVector<DFEVar> output;

    public void setInitFlag(DFEVar x) {
        initWeightsFlag <== x;
    }

    public DFEVar getOutputControlFlag() {
        return outputControlFlag;
    }

    public void setEnableSignal(DFEVar x) {
        enableSignal <== x;
    }

    public DFEVar makeSimpleEnableCounter(int max, DFEVar enable) {
        if (max == 1) {
            return constant.var(dfeBool(), 0);
        } else {
            return control.count.makeCounter(
                    control.count.makeParams(Utils.ceilLog2(max))
                    .withInitValue(0l)
                    .withInc(1l)
                    .withMax(max)
                    .withEnable(enable)
                ).getCount();

        }
    }

    public void setBiasInput(DFEVar x) {
        biasInput <== x;
    }

    public DFEVar getIsInitializingWeights() {
        return isInitializingWeights;
    }

    public DFEVector<DFEVar> getOutput() {
        return output;
    }

    private List<DFEVar> map(List<DFEVector<DFEVar>> list, int index) {
        /* Gets the index-th element of every vector in list. */
        List<DFEVar> ret = new ArrayList<DFEVar>();
        for (DFEVector<DFEVar> vector: list) {
            ret.add(vector[index]);
        }
        return ret;
    }

    private DFEVar relu(DFEVar x) {
        return (x > 0 ? x : 0);
    }

    public DFEVar checkWeightIterWrap(CounterChain chain, DFEVar weightIter) {
        if (ctr.getLastWeightIterations() == 1 && ctr.getWeightIterations() == 1) {
            return constant.var(dfeBool(), 1);
        } else {
            return chain.getCounterWrap(weightIter);
        }
    }

    private DFEVar getPixelIter(
            DFEVar enable, CounterChain chain, DFEVar lookAhead, DFEVar weightIter, DFEVar kernelIter) {
        /* Number of iterations to spend per channel. */
        final int pixelIterations =
                ctr.getSchedulerIterations()
                * ctr.getConvolutionIterations()
                * ctr.getKernelIterations();
        final int weightsUsageCycles = ctr.getWeightIterations();

        DFEVar pixelIterBase = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(pixelIterations))
                .withInitValue(0l)
                .withInc((weightsUsageCycles * ctr.getKernelIterations()) % pixelIterations)
                .withMax(pixelIterations)
                .withEnable(enable
                            & lookAhead.eq(layerParams.getConv().getLookAhead() - 1)
                            & checkWeightIterWrap(chain, weightIter)
                            & kernelIter.eq(ctr.getKernelIterations() - 1))
                .withReset(batchCounter.eq(0))
            ).getCount();

        /* Defines the stage at which we are using a particular channel. */
        DFEVar pixelIter = dfeUInt(Utils.ceilLog2(pixelIterations)).newInstance(this);
        optimization.pushPipeliningFactor(0.0);
        pixelIter <== (weightIter.eq(0) & kernelIter.eq(0)
                         ? pixelIterBase
                         : Utils.modInc(stream.offset(pixelIter, -1), pixelIterations));
        optimization.popPipeliningFactor();

        return pixelIter;
    }

    private DFEVar getConvIter(
            DFEVar enable, CounterChain chain, DFEVar lookAheadIter, DFEVar weightIter, DFEVar kernelIter) {

        /* The number of convIter that a weightIter yields. */
        DFEVar convIterBase = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(ctr.getConvolutionIterations()))
                .withInitValue(0)
                .withInc(ctr.getWeightIterations() % ctr.getConvolutionIterations())
                .withMax(ctr.getConvolutionIterations())
                .withEnable(enable
                            & lookAheadIter.eq(layerParams.getConv().getLookAhead() - 1)
                            & checkWeightIterWrap(chain, weightIter)
                            & kernelIter.eq(ctr.getKernelIterations() - 1))
                .withReset(batchCounter.eq(0))
            ).getCount();

        DFEVar convIter = dfeUInt(
                Utils.ceilLog2(ctr.getConvolutionIterations())).newInstance(this);
        optimization.pushPipeliningFactor(0.0);
        convIter <== (kernelIter.eq(0)
                      ? (weightIter.eq(0)
                         ? convIterBase
                         : Utils.modInc(stream.offset(convIter, -1), ctr.getConvolutionIterations()))
                      : stream.offset(convIter, -1));
        optimization.popPipeliningFactor();

        return convIter;
    }

    public void setInput(List<DFEVector<DFEVar>> workerOutputList) {
        for (int i = 0 ; i < workerOutputList.size() ; i++) {
            inputVectors[i] <== workerOutputList[i];
        }
    }

    public ConvolutionAccumulator(Kernel owner, LayerParameter params) {
        super(owner);

        ctr = new IterationCounter(params);
        layerParams = params;
        convParams = params.getConv();
        inputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), layerParams.getConv().getConvFoldingFactor());
        outputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), layerParams.getNumOutputs());
        enableSignal = dfeBool().newInstance(this);
        DFEVectorType<DFEVar> biasVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), layerParams.getNumOutputs());

        output = outputVectorType.newInstance(this);
        inputVectors = new ArrayList<DFEVector<DFEVar>>();

        /* Counters for initialization and loading
         *
         * Notion of loading and initization is similar, but different. Loading
         * is done when bias are not loaded directly from the CPU, but rather,
         * from the BRAM on the FPGA.
         *
         * This will take fewer cycles as there is no stream size to allign to.
         * (Hence, the number of loading cycles will be exactly numOutputs)
         */
        DFEVar initChannel = control.count.simpleCounter(
                Utils.ceilLog2(ctr.getBiasInitCycles()),
                ctr.getBiasInitCycles());
        DFEVar loadChannel = control.count.simpleCounter(
                Utils.ceilLog2(layerParams.getNumOutputs()),
                layerParams.getNumOutputs());
        DFEVar weightsAllInitialized = control.count.makeCounter(
                control.count.makeParams(1)
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(initChannel.eq(ctr.getBiasInitCycles() - 1)))
            .getCount();
        DFEVar weightsAllLoaded = control.count.makeCounter(
                control.count.makeParams(1)
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(loadChannel.eq(layerParams.getNumOutputs() - 1)))
            .getCount();
 
        initWeightsFlag = dfeBool().newInstance(this);
        isInitializingWeights = initWeightsFlag & ~weightsAllInitialized;
        DFEVar isLoadingWeightsFromBram = ~initWeightsFlag & ~weightsAllLoaded;

        // Runtime Counters and loop variables
        batchCounter = makeSimpleEnableCounter(
                convParams.getLookAhead() * ctr.getTotalIterations(),
                enableSignal);

        DFEVar groupIter;
        DFEVar convIter;
        DFEVar lookAheadIter;
        DFEVar pixelIter;

        if (convParams.getLookAhead() == 1) {
            final int totalIter =
                    ctr.getKernelIterations()
                    * ctr.getConvolutionIterations()
                    * ctr.getSchedulerIterations();
            CounterChain chain = control.count.makeCounterChain(enableSignal);
            Utils.chainCounterOrZero(this, chain, ctr.getSchedulerIterations());
            convIter = Utils.chainCounterOrZero(
                    this, chain, ctr.getConvolutionIterations());
            Utils.chainCounterOrZero(this, chain, ctr.getKernelIterations());
            pixelIter = makeSimpleEnableCounter(totalIter, enableSignal);

            CounterChain groupChain =
                    control.count.makeCounterChain(enableSignal);
            groupIter = Utils.chainCounterOrZero(
                    this,
                    groupChain,
                    layerParams.getConv().getGroup());
            final int inGroupIterations =
                    ctr.getTotalIterations()
                    / layerParams.getConv().getGroup();
            Utils.chainCounterOrZero(this, groupChain, inGroupIterations);

            lookAheadIter = constant.var(dfeBool(), 0);
            outputControlFlag = enableSignal & pixelIter.eq(totalIter - 1);

        } else {

            CounterChain chain = control.count.makeCounterChain(enableSignal);
            DFEVar loopIter = Utils.chainCounterOrZero(this, chain, ctr.getRevisitIterations());;
            lookAheadIter = Utils.chainCounterOrZero(this, chain, convParams.getLookAhead());
            DFEVar weightIter;
            groupIter = null;

            if (ctr.getLastWeightIterations() == ctr.getWeightIterations()) {
                weightIter = Utils.chainCounterOrZero(this, chain, ctr.getWeightIterations());

            } else {
                final int totalBeforeLastloopIterations =
                        (ctr.getRevisitIterations() - 1)
                        * ctr.getWeightIterations()
                        * ctr.getKernelIterations()
                        * convParams.getLookAhead();
                DFEType type = dfeUInt(1 + Utils.ceilLog2(ctr.getWeightIterations()));
                DFEVar muxedWeightUsageCycles = (
                        (batchCounter < totalBeforeLastloopIterations)
                        ? constant.var(type, ctr.getWeightIterations())
                        : constant.var(type, ctr.getLastWeightIterations()));
                System.out.println(totalBeforeLastloopIterations);
                muxedWeightUsageCycles.simWatch("muxedWeightsCycles");
                weightIter = chain.addCounter(muxedWeightUsageCycles, 1);
            }

            DFEVar kernelIter = Utils.chainCounterOrZero(this, chain, ctr.getKernelIterations());

            convIter = getConvIter(
                    enableSignal, chain, lookAheadIter, weightIter, kernelIter);
            pixelIter = getPixelIter(
                    enableSignal, chain, lookAheadIter, weightIter, kernelIter);

            outputControlFlag =
                    enableSignal
                    & loopIter.eq(ctr.getRevisitIterations() - 1)
                    & weightIter.eq(ctr.getLastWeightIterations() - 1)
                    & kernelIter.eq(ctr.getKernelIterations() - 1);
        }

        groupIter.simWatch("group_iter");
        batchCounter.simWatch("batchCounter");
        isInitializingWeights.simWatch("initializingWeights");
        lookAheadIter.simWatch("lookAheadIter");
        convIter.simWatch("convIter");
        outputControlFlag.simWatch("outputControlFlag");

        // Kernel IO interfaces
        biasInput = GlobalConfig.get().getDataType().newInstance(this);

        for (int i = 0 ; i < layerParams.getConv().getWorkerFactor() ; i++) {
            inputVectors.add(inputVectorType.newInstance(this));
        }

        DFEVector<DFEVar> biasBuffer = biasVectorType.newInstance(this);

        biasStore = mem.alloc(GlobalConfig.get().getDataType(), params.getNumOutputs());
        biasStore.write(loadChannel, biasInput, ~weightsAllLoaded);
        DFEVar biasRead = biasStore.read(loadChannel);

        optimization.pushPipeliningFactor(0.0);
        for (int i = 0 ; i < params.getNumOutputs() ; i++) {
            DFEVar prev = stream.offset(biasBuffer[i], -1);
            biasBuffer[i] <== (
                    (isInitializingWeights & initChannel.eq(i))
                    ? biasInput
                    : (isLoadingWeightsFromBram & initChannel.eq(i)
                        ? biasRead
                        : prev));
        }
        optimization.popPipeliningFactor();

        List<DFEVector<DFEVar>> lookAheadOutputs = new ArrayList<DFEVector<DFEVar>>();
        List<DFEVar> sumVars = new ArrayList<DFEVar>();

        final int convFoldingFactor = layerParams.getConv().getConvFoldingFactor();
        for (int i = 0 ; i < convFoldingFactor ; i++) {
            sumVars.add(Utils.treeReduceAdd(map(inputVectors, i)));
        }
        sumVars[0].simWatch("sumVars");

        // logic for accumulating outputs
        for (int lookAhead = 0; lookAhead < convParams.getLookAhead() ; lookAhead++) {
            DFEVector<DFEVar> lookAheadOutput = outputVectorType.newInstance(this);

            for (int channel = 0 ; channel < layerParams.getNumOutputs() ; channel++) {

                final int totalGroups = layerParams.getConv().getGroup();
                final int numOutputs = layerParams.getNumOutputs();

                DFEVar acc = GlobalConfig.get().getDataType().newInstance(this);
                DFEVar initFlag =
                        lookAheadIter.eq(lookAhead) & pixelIter.eq(0);
                DFEVar channelOutputFlag = (
                        lookAheadIter.eq(lookAhead)
                        & convIter.eq(
                            (channel % (numOutputs / totalGroups))
                            / convFoldingFactor)
                        & groupIter.eq(
                            channel / (numOutputs / totalGroups)));
                DFEVar muxedSumVars = (
                        channelOutputFlag
                        ? sumVars[channel % convFoldingFactor]
                        : 0.0);
                DFEVar carriedSum = stream.offset(acc, -1);

                // push and pop pipelining factor required to make sure this accumulator runs at
                // 0-tick latency (i.e: stream.offset(-1) works)
                optimization.pushPipeliningFactor(0);
                DFEVar prevAcc = initFlag ? biasBuffer[channel] : carriedSum;
                optimization.popPipeliningFactor();

                acc <== muxedSumVars + prevAcc;
                lookAheadOutput[channel] <== acc;

                if (channel == 0 || channel == 13) {
                    channelOutputFlag.simWatch("channel_output_flag_" + channel);

                }
            }

            lookAheadOutputs.add(lookAheadOutput);
        }

        DFEVector<DFEVar> chosen;
        if (convParams.getLookAhead() == 1) {
            chosen = lookAheadOutputs[0];

        } else {
            chosen = control.mux(lookAheadIter, lookAheadOutputs);

        }

        if (layerParams.getActivation() == LayerParameter.Activation.None) {
            output <== chosen;

        } else if (layerParams.getActivation() == LayerParameter.Activation.Relu) {
            for (int i = 0 ; i < layerParams.getNumOutputs() ; i++) {
                output[i] <== relu(chosen[i]);
            }

        } else {
            throw new RuntimeException("Unsupported activation type");
        }

        // debugging output
        // String s_output = "[";
        // String s_conv = "[\n";
        // List<Object> debugValues = new ArrayList<Object>();
        // debugValues.add((Integer) layerParams.getLayerId());
        // debugValues.add(outputControlFlag);
        // debugValues.add(pipelineStage);
        // debugValues.add(pipelineLengthVar);
        // debugValues.add(schedulerIter);
        // debugValues.add(convIter);
        // debugValues.add(kernelIter);
        // for (DFEVector<DFEVar> vector: inputVectors) {
        //     s_conv += "[";
        //     for (int i = 0 ; i < params.getConv().getConvFoldingFactor() ; i++) {
        //         debugValues.add(vector[i]);
        //         s_conv += "%.3f, ";
        //     }
        //     s_conv += "]\n";
        // }
        // for (int i = 0 ; i < params.getNumOutputs() ; i++) {
        //     debugValues.add(output[i]);
        //     s_output += "%.3f, ";
        // }
        // s_conv += "]";
        // s_output += "]";
        // debug.simPrintf(
        //         "ConvolutionAccumulatorKernel[layer = %d]"
        //         + " outputControlFlag = %d"
        //         + " pipelineStage = %d pipelineLengthVar = %d"
        //         + " schedulerIter = %d convIter = %d kernelIter = %d"
        //         + "\ninputs = " + s_conv + "\n"
        //         + "\noutput = " + s_output + "\n",
        //         debugValues.toArray(new Object [1]));
    }

    public int cyclesPerImage() {
        int totalOutputPixels = layerParams.getOutputHeight() * layerParams.getOutputWidth();
        int cyclesPerPixel = ctr.getSchedulerIterations()
                * ctr.getConvolutionIterations()
                * ctr.getKernelIterations();
        return totalOutputPixels * cyclesPerPixel;
    }
}
