package fpgaconvnet.lib;


import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

import fpgaconvnet.Utils;

public class StrideCounter extends KernelLib {

    final int stride;
    DFEVar rowStrideCtr;
    DFEVar colStrideCtr;
    DFEVar controlFlag;

    DFEVar row;
    DFEVar col;
    DFEVar iter;

    public StrideCounter(
            Kernel kernel,
            int rows,
            int cols,
            int argStride,

            DFEVar isBorderPixel,
            int cyclesPerPixel,
            int borderWidth) {
        super(kernel);
        stride = argStride;

        CounterChain masterChain = control.count.makeCounterChain();
        row = Utils.chainCounterOrZero(this, masterChain, rows);
        col = Utils.chainCounterOrZero(this, masterChain, cols);
        iter = Utils.chainCounterOrZero(this, masterChain, cyclesPerPixel);

        if (stride == 1) {
            colStrideCtr = constant.var(dfeBool(), 0);
            rowStrideCtr = constant.var(dfeBool(), 0);
            controlFlag = ~isBorderPixel;

        } else {
            colStrideCtr = control.count.makeCounter(
                    control.count.makeParams(Utils.ceilLog2(stride))
                        .withMax(stride)
                        .withInc(1)
                        .withReset(col.eq(0) & iter.eq(0))
                        .withEnable(iter.eq(cyclesPerPixel - 1)
                                    & ~isBorderPixel)
                    ).getCount();
            rowStrideCtr = control.count.makeCounter(
                    control.count.makeParams(Utils.ceilLog2(stride))
                        .withMax(stride)
                        .withInc(1)
                        .withReset(row.eq(0)
                                   & col.eq(0)
                                   & iter.eq(0))
                        .withEnable(iter.eq(cyclesPerPixel - 1)
                                    & col.eq(cols - 1 - borderWidth)
                                    & ~isBorderPixel)
                    ).getCount();
            controlFlag = rowStrideCtr.eq(0) & colStrideCtr.eq(0) & ~isBorderPixel;
        }
    }

    public DFEVar getControlFlag() {
        return controlFlag;
    }
    
    public void simWatch() {
        rowStrideCtr.simWatch("sc_row_stride");
        colStrideCtr.simWatch("sc_col_stride");
        row.simWatch("sc_row");
        col.simWatch("sc_col");
        iter.simWatch("sc_iter");
        controlFlag.simWatch("control_flag");
    }
}
