package fpgaconvnet.lib;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

import fpgaconvnet.GlobalConfig;
import fpgaconvnet.IterationCounter;
import fpgaconvnet.Utils;
import fpgaconvnet.kernels.ConvolutionUnitKernel;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;


public class CpuInitWeightsCounter extends KernelLib {

    final IterationCounter iterCounter;
    final ConvolutionParameter convParams;
    final LayerParameter layerParams;
    final DFEVar initAddress;
    final DFEVar initConvIter;
    final DFEVar initWorkerIter;
    final DFEVar initWeightsFlag;
    final DFEVar initializationComplete;
    final DFEVar isInitializingWeights;
    final DFEVar isPaddingInit;
    final DFEVar convIter;
    final DFEVar kernelIter;
    final int totalAddressCount;
    final DFEVar weightAddress;

    public DFEVar makeSimpleEnableCounter(int max, DFEVar enable) {
        if (max == 1) {
            return constant.var(dfeBool(), 0);
        } else {
            return control.count.makeCounter(
                    control.count.makeParams(Utils.ceilLog2(max))
                    .withInitValue(0l)
                    .withInc(1l)
                    .withMax(max)
                    .withEnable(enable)
                ).getCount();

        }
    }

    public CpuInitWeightsCounter(ConvolutionUnitKernel kernel, LayerParameter argLayerParams) {
        super(kernel);

        layerParams = argLayerParams;
        iterCounter = new IterationCounter(layerParams);
        convParams = layerParams.getConv();
        totalAddressCount =
                iterCounter.getSchedulerIterations()
                * iterCounter.getConvolutionIterations()
                * iterCounter.getKernelIterations();

        CounterChain initChain = control.count.makeCounterChain();
        DFEVar initCycleIter = control.count.simpleCounter(
                Utils.ceilLog2(initCycles()), initCycles());
        initAddress = Utils.chainCounterOrZero(this, initChain, totalAddressCount);
        initWorkerIter = Utils.chainCounterOrZero(
                this, initChain, layerParams.getConv().getWorkerFactor());
        initConvIter = Utils.chainCounterOrZero(
                this, initChain, layerParams.getConv().getConvFoldingFactor());
        Counter initializationCompleteCtr = control.count.makeCounter(
                control.count.makeParams(1)
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(initCycleIter.eq(initCycles() - 1)));
        Counter paddingInitCtr = control.count.makeCounter(
                control.count.makeParams(1)
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(initAddress.eq(totalAddressCount - 1)
                            & initConvIter.eq(layerParams.getConv().getConvFoldingFactor() - 1)
                            & initWorkerIter.eq(layerParams.getConv().getWorkerFactor() - 1)));

        initWeightsFlag = io.scalarInput("init", dfeUInt(1));
        initializationComplete = initializationCompleteCtr.getCount();
        isInitializingWeights = initWeightsFlag & ~initializationComplete;
        isPaddingInit = paddingInitCtr.getCount();

        // Runtime
        CounterChain chain = control.count.makeCounterChain(~isInitializingWeights);
        convIter = Utils.chainCounterOrZero(this, chain, iterCounter.getConvolutionIterations());
        kernelIter = Utils.chainCounterOrZero(this, chain, iterCounter.getKernelIterations());
        weightAddress = makeSimpleEnableCounter(
                totalAddressCount,
                ~isInitializingWeights);
    }

    public DFEVar getWeightAddress() {
        return weightAddress;
    }

    public DFEVar getWriteEnable() {
        return isInitializingWeights
                & ~isPaddingInit
                & initConvIter.eq(convParams.getConvFoldingFactor() - 1)
                & initWorkerIter.eq(convParams.getWorkerFactor() - 1);
    }

    public DFEVar getIsWorkerConvTurn(int workerId, int convUnitIndex) {
        return isInitializingWeights
                & initConvIter.eq(convUnitIndex)
                & initWorkerIter.eq(workerId)
                & ~isPaddingInit;
    }

    public DFEVar getWeightsInputFlag() {
        return isInitializingWeights;
    }

    public DFEVar getInputControlFlag() {
        return ~isInitializingWeights & convIter.eq(0) & kernelIter.eq(0);
    }

    public DFEVar getOutputControlFlag() {
        return ~isInitializingWeights;
    }

    public DFEVar getKernelIter() {
        return kernelIter;
    }

    public DFEVar getConvIter() {
        return convIter;
    }

    public int stallInitCycles() {
        return initCycles() - realInitCycles();
    }

    public int realInitCycles() {
        return layerParams.getConv().getWorkerFactor()
                * layerParams.getConv().getConvFoldingFactor()
                * iterCounter.getSchedulerIterations()
                * iterCounter.getConvolutionIterations()
                * iterCounter.getKernelIterations();
    }

    public int initCycles() {
        int multipleBase =
                ((int) Utils.lcm(4, layerParams.getConv().getKernelFoldingFactor()))
                / layerParams.getConv().getKernelFoldingFactor();
        return Utils.divCeil(realInitCycles(), multipleBase) * multipleBase;
    }

    public DFEVar getInitAddress() {
        return initAddress;
    }
}
