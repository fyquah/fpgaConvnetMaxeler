package fpgaconvnet;
import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;

import fpgaconvnet.protos.Parameters.LayerParameter;


public class ConvolutionUnitKernel extends ConvolutionKernelBase {

    private final int kernelDim;
    private final DFEVectorType<DFEVar> weightInputVectorType;
    private final DFEVectorType<DFEVar> inputVectorType;
    private final DFEVectorType<DFEVar> outputVectorType;
    private final List<Memory<DFEVar>> filtersRomList;
    private final LayerParameter layerParams;

    public ConvolutionUnitKernel(KernelParameters kp, LayerParameter params) {
        super(kp, params);
        layerParams = params;
        kernelDim = params.getConv().getKernelSize();

        inputVectorType = new DFEVectorType<DFEVar>(GlobalConfig.dataType, kernelDim * kernelDim);
        weightInputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType, params.getConv().getKernelFoldingFactor());
        outputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType, layerParams.getConv().getConvFoldingFactor());
        filtersRomList = new ArrayList<Memory<DFEVar>>();

        final int convFoldingFactor = layerParams.getConv().getConvFoldingFactor();
        final int kernelFoldingFactor = layerParams.getConv().getKernelFoldingFactor();
        final int totalAddressCount =
                getSchedulerIterations()
                * getConvolutionIterations()
                * getKernelIterations();

        // Counters for initialization
        CounterChain initChain = control.count.makeCounterChain();
        DFEVar initConvIter = Utils.chainCounterOrZero(
                this, initChain, layerParams.getConv().getConvFoldingFactor());
        DFEVar initAddress = Utils.chainCounterOrZero(this, initChain, totalAddressCount);
        Counter initializationCompleteCtr = control.count.makeCounter(
                control.count.makeParams(1)
                .withInc(0)
                .withMax(2)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(initConvIter.eq(layerParams.getConv().getConvFoldingFactor() - 1)
                            & initAddress.eq(totalAddressCount - 1)));
        DFEVar initializationComplete = initializationCompleteCtr.getCount();

        DFEVar initWeightsFlag = io.scalarInput("init", dfeUInt(1));
        DFEVar isInitializingWeights = initWeightsFlag & ~initializationComplete;
        isInitializingWeights.simWatch("isInitializingWeights");
        initializationComplete.simWatch("initializationComplete");
        initConvIter.simWatch("initConvIter");
        initAddress.simWatch("initAddress");
        debug.simPrintf("layer_%d init weights = %d\n",
                    params.getLayerId(), isInitializingWeights);

        // Runtime counters
        CounterChain chain = control.count.makeCounterChain(initializationComplete);
        DFEVar iter = Utils.chainCounterOrZero(this, chain, getConvolutionIterations());
        DFEVar kernelIter = Utils.chainCounterOrZero(this, chain, getKernelIterations());
        DFEVar address = control.count.simpleCounter(
                Utils.ceilLog2(totalAddressCount), totalAddressCount);


        for (int workerId = 0 ; workerId < params.getConv().getWorkerFactor() ; workerId++) {

            DFEVar inputControlFlag = ~isInitializingWeights & iter.eq(0) & kernelIter.eq(0);
            DFEVar outputControlFlag = ~isInitializingWeights;
            DFEVector<DFEVar> inputWindow = io.input(getInputName(workerId),
                                                      inputVectorType,
                                                      inputControlFlag);
            DFEVector<DFEVar> weightsInputs = io.input(getWeightsInputName(workerId),
                                                       weightInputVectorType,
                                                       isInitializingWeights);

            DFEVector<DFEVar> output = outputVectorType.newInstance(this);
            final DFEVar[] pixelVars = new DFEVar[layerParams.getConv().getKernelFoldingFactor()];
            final DFEVar[][] weightVars = new DFEVar[convFoldingFactor][kernelFoldingFactor];

            for (int multId = 0; multId < layerParams.getConv().getKernelFoldingFactor(); multId++) {
                pixelVars[multId] = getConvPixel(multId, kernelIter, inputWindow);
            }

            for (int convUnitIndex = 0; convUnitIndex < convFoldingFactor; convUnitIndex++) {
                DFEVar convUnitOutput = constant.var(GlobalConfig.dataType, 0.0);

                for (int multId = 0; multId < kernelFoldingFactor; multId++) {
                    Memory<DFEVar> filtersRom = mem.alloc(GlobalConfig.dataType, totalAddressCount);

                    filtersRom.write(
                            initAddress,
                            weightsInputs[multId],
                            isInitializingWeights & initConvIter.eq(convUnitIndex));

                    weightVars[convUnitIndex][multId] = filtersRom.read(address);
                    convUnitOutput = convUnitOutput
                            + pixelVars[multId] * weightVars[convUnitIndex][multId];

                    filtersRomList.add(filtersRom);
                }
                output[convUnitIndex] <== convUnitOutput;
            }

            io.output(getOutputName(workerId), output, outputVectorType, outputControlFlag);
        }
    }

    public int initCycles() {
        return layerParams.getConv().getConvFoldingFactor()
            * getSchedulerIterations() * getConvolutionIterations() * getKernelIterations();
    }

    public int initStreamSize() {
        return layerParams.getConv().getConvFoldingFactor()
            * getSchedulerIterations() * getConvolutionIterations()
            * layerParams.getConv().getKernelSize() * layerParams.getConv().getKernelSize();
    }

    public int cyclesPerImage() {
        int totalOutputPixels = layerParams.getOutputHeight() * layerParams.getOutputWidth();
        int cyclesPerPixel = getSchedulerIterations()
                * getConvolutionIterations()
                * getKernelIterations();
        return totalOutputPixels * cyclesPerPixel;
    }

    public String getInputName(int workerId) {
        return "input_" + workerId;
    }

    public String getWeightsInputName(int workerId) {
        return "weights_input_" + workerId;
    }

    public String getOutputName(int workerId) {
        return "output_" + workerId;
    }

    private DFEVar getConvPixel(
            int multiplierNumber, DFEVar kernelIter, DFEVector<DFEVar> inputWindow) {
        if (getKernelIterations() == 1) {
            return inputWindow[multiplierNumber];
        }
        final DFEVar[] pixelChoices = new DFEVar[getKernelIterations()];
        for (int i = 0; i < getKernelIterations() ; i++) {
            int idx = multiplierNumber + i * layerParams.getConv().getKernelFoldingFactor();

            if (idx < inputWindow.getSize()) {
                pixelChoices[i] = inputWindow[idx];
            } else {
                pixelChoices[i] = constant.var(GlobalConfig.dataType, 0);
            }
        }
        return control.mux(kernelIter, pixelChoices);
    }
}
