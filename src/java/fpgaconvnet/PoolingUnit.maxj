package fpgaconvnet;

import java.util.List;
import java.lang.RuntimeException;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import maxpower.ops.AssociativeOp;
import maxpower.utils.TreeReduce;

import fpgaconvnet.protos.Parameters.PoolingParameter;


public class PoolingUnit extends KernelLib {
    private final DFEVar output_;
    private final DFEVar input;
    private final Kernel kernel;
    private final SlidingWindow slidingWindow;
    private final int inputHeight, inputWidth, kernelDim;
    private final AssociativeOp<DFEVar> op;

    private static final AssociativeOp<DFEVar> dfeMaxOp = new AssociativeOp<DFEVar>(){
        @Override
        public DFEVar op(DFEVar a, DFEVar b) { return a > b ? a : b; }
    };

    private static final AssociativeOp<DFEVar> dfeSumOp = new AssociativeOp<DFEVar>() {
        @Override
        public DFEVar op(DFEVar a, DFEVar b) { return a + b; }
    };

    public PoolingUnit (Kernel argKernel, PoolingParameter.PoolingType poolingType,
                        int argInputHeight, int argInputWidth, int argKernelDim) {
        super(argKernel);

        kernel = argKernel;
        inputHeight = argInputHeight;
        inputWidth = argInputWidth;
        kernelDim = argKernelDim;
        input = GlobalConfig.dataType.newInstance(this);
        float paddedPixel = 0.0f;

        if (poolingType.equals(PoolingParameter.PoolingType.Max)) {
            paddedPixel = (float) -(1 << (GlobalConfig.intBits - 1));
        }

        slidingWindow = new SlidingWindow(
            kernel,
            input,
            inputHeight,
            inputWidth,
            kernelDim,
            1,
            constant.var(GlobalConfig.dataType, (double) paddedPixel),
            0);

        if (poolingType.equals(PoolingParameter.PoolingType.Average)) {
            op = dfeSumOp;
            output_ = TreeReduce.reduce(op, slidingWindow.asList()) / (kernelDim * kernelDim);

        } else if (poolingType.equals(PoolingParameter.PoolingType.Max)) {
            op = dfeMaxOp;
            output_ = TreeReduce.reduce(op, slidingWindow.asList());

        } else {
            throw new RuntimeException("Unknown Pooling type!");

        }
    }

    public void setInput(DFEVar x) {
        input <== x;
    }

    public DFEVar output() {
        return output_;
    }
}
