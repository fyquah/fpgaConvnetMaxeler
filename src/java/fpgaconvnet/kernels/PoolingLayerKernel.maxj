package fpgaconvnet.kernels;

import java.util.List;
import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import maxpower.ops.AssociativeOp;
import maxpower.utils.TreeReduce;

import fpgaconvnet.Dimension;
import fpgaconvnet.GlobalConfig;
import fpgaconvnet.SlidingWindow;
import fpgaconvnet.Utils;
import fpgaconvnet.Functional;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.PoolingParameter;

import fpgaconvnet.lib.AspectChangeIO;


public class PoolingLayerKernel extends Kernel {
    Dimension inputDimension, outputDimension;
    int channelFoldingFactor;
    int poolingDim;
    int stride;
    PoolingParameter.PoolingType poolingType;
    DFEVectorType<DFEVar> outputType, inputType;
    DFEVector<DFEVar> input;
    DFEVector<DFEVar> output;
    LayerParameter layerParams;
    DFEVar[] poolingUnits;
    SlidingWindow slidingWindows;

    private static final AssociativeOp<DFEVar> dfeMaxOp = new AssociativeOp<DFEVar>(){
        @Override
        public DFEVar op(DFEVar a, DFEVar b) { return a > b ? a : b; }
    };

    private static final AssociativeOp<DFEVar> dfeSumOp = new AssociativeOp<DFEVar>() {
        @Override
        public DFEVar op(DFEVar a, DFEVar b) { return a + b; }
    };

    public int getPixelIterations() {
        return getPoolingIterations();
    }

    public int getPoolingIterations() {
        return Utils.divCeil(layerParams.getNumInputs(),
                             layerParams.getPool().getChannelFoldingFactor());
    }

    public int cyclesPerImage() {
        return inputDimension.height() * inputDimension.width() * getPixelIterations();
    }

    public PoolingLayerKernel(KernelParameters kp, LayerParameter argLayerParams) {
        super(kp);

        // Parameters from PoolingParameters
        layerParams = argLayerParams;
        channelFoldingFactor = layerParams.getPool().getChannelFoldingFactor();
        inputDimension = new Dimension(
                layerParams.getInputHeight(),
                layerParams.getInputWidth(),
                layerParams.getNumInputs());
        poolingDim = layerParams.getPool().getDim();
        outputDimension = new Dimension(
                layerParams.getOutputHeight(),
                layerParams.getOutputWidth(),
                layerParams.getNumOutputs());
        poolingType = layerParams.getPool().getType();
        stride = layerParams.getPool().getStride();
        // end of extracted parameters

        // derived properties
        int nChannels = inputDimension.channels();
        outputType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), channelFoldingFactor);
        inputType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), channelFoldingFactor);

        input = inputType.newInstance(this);
        output = outputType.newInstance(this);

        // the frame that we want to consider for top left / top right pixels.
        CounterChain masterChain = control.count.makeCounterChain();
        DFEVar inputRow = Utils.chainCounterOrZero(this, masterChain, inputDimension.height());
        DFEVar inputCol = Utils.chainCounterOrZero(this, masterChain, inputDimension.width());
        DFEVar poolingIter = Utils.chainCounterOrZero(this, masterChain, getPoolingIterations());

        DFEVar colStride = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(stride))
                .withMax(stride)
                .withReset(inputCol.eq(0))
                .withEnable(poolingIter.eq(getPoolingIterations() - 1)))
                    .getCount();
        DFEVar rowStride = control.count.makeCounter(
                control.count.makeParams(Utils.ceilLog2(stride))
                .withMax(stride)
                .withInc(1)
                .withReset(inputCol.eq(0) & inputRow.eq(0))
                .withEnable(inputCol.eq(inputDimension.width() - 1)
                            & poolingIter.eq(getPoolingIterations() - 1)))
                    .getCount();

        inputRow.simWatch("input_row");
        inputCol.simWatch("input_col");
        rowStride.simWatch("row_stride");
        colStride.simWatch("col_stride");

        float paddedPixel = 0.0f;
        DFEVar dividend = null;
        AssociativeOp<DFEVar> op;

        if (poolingType.equals(PoolingParameter.PoolingType.Max)) {
            paddedPixel = (float) -8;
        }

        if (poolingType.equals(PoolingParameter.PoolingType.Average)) {
            dividend = poolDividend(inputRow, inputCol);
            dividend.simWatch("pooling_dividend");
        }

        poolingUnits = new DFEVar[channelFoldingFactor];
        DFEVector<DFEVar> poolerInput =
            new DFEVectorType<DFEVar>(
                    GlobalConfig.get().getDataType(), channelFoldingFactor)
            .newInstance(this);
        for (int i = 0 ; i < channelFoldingFactor ; i++) {
            poolerInput[i] <== input[i];
        }

        slidingWindows = new SlidingWindow(
            this,
            poolerInput,
            inputDimension.height(),
            inputDimension.width(),
            poolingDim,
            getPixelIterations(),
            constant.var(GlobalConfig.get().getDataType(), (double) paddedPixel),
            -(poolingDim / 2)
        );
        System.out.println("Sliding window offset = " + (-(poolingDim / 2)));

        for (int i = 0 ; i < channelFoldingFactor ; i++) {

            DFEVar poolerOutput = null;

            if (poolingType.equals(PoolingParameter.PoolingType.Average)) {
                op = dfeSumOp;
                poolerOutput =
                    TreeReduce.reduce(op,
                            Utils.vectorToList(
                                slidingWindows.getChannelOutput(i)))
                    * dividend;

            } else if (poolingType.equals(PoolingParameter.PoolingType.Max)) {
                op = dfeMaxOp;
                poolerOutput = TreeReduce.reduce(
                        op,
                        Utils.vectorToList(slidingWindows.getChannelOutput(i)));

            } else {
                throw new RuntimeException("Unknown Pooling type!");

            }

            if (layerParams.getActivation() == LayerParameter.Activation.None) {
                poolingUnits[i] = poolerOutput;

            } else if (layerParams.getActivation() == LayerParameter.Activation.Relu) {
                poolingUnits[i] = poolerOutput > 0 ? poolerOutput : 0;

            } else {
                throw new RuntimeException("Unsupported activation type");
            }

            poolingUnits[i].simWatch(String.format("pooling_unit_%d", i));
        }

        // logic for accumulating outputs
        for (int i = 0 ; i < channelFoldingFactor ; i++) {
            output[i] <== poolingUnits[i];
        }

        // set the kernel I/O interface
        if (layerParams.getIsFirstLayer()) {
            /* Last layer - cast from fixed point to dfe float. */
            DFEVectorType<DFEVar> rawInputVectorType = new DFEVectorType<DFEVar>(
                    GlobalConfig.get().getCpuType(), channelFoldingFactor);
            DFEVector<DFEVar> rawInput =
                    io.input("x", rawInputVectorType);
            input <== rawInput.cast(inputType);

        } else {
            input <== io.input("x", inputType);

        }

        DFEVar outputFlag = rowStride.eq(poolingDim / 2)
                & colStride.eq(poolingDim / 2);

        int colLimit = (outputDimension.width() - 1) * stride + (poolingDim / 2);
        DFEVar inputColBarrier = control.count.makeCounter(
                control.count.makeParams(1)
                .withReset(inputCol.eq(0))
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(
                    inputCol.eq(colLimit) 
                    & poolingIter.eq(getPixelIterations() - 1)))
            .getCount();

        int rowLimit = (layerParams.getOutputHeight() - 1) * stride + (poolingDim / 2);
        DFEVar inputRowBarrier = control.count.makeCounter(
                control.count.makeParams(1)
                .withReset(inputCol.eq(0) & inputRow.eq(0))
                .withInc(1)
                .withMax(1)
                .withWrapMode(Count.WrapMode.STOP_AT_MAX)
                .withEnable(
                    inputRow.eq(rowLimit)
                    & inputCol.eq(inputDimension.width() - 1)
                    & poolingIter.eq(getPixelIterations() - 1)))
            .getCount();
        outputFlag = outputFlag & inputColBarrier.eq(0) & inputRowBarrier.eq(0);

        System.out.println("colLimit = " + colLimit);
        System.out.println("rowLimit = " + rowLimit);
        inputColBarrier.simWatch("input_col_barrier");
        inputRowBarrier.simWatch("input_row_barrier");
        outputFlag.simWatch("output_flag");

        normalOutput(output, outputFlag);

        /*
        if (layerParams.getOutputVectorWidth() == layerParams.getNumOutputs()) {
            normalOutput(output, outputFlag);
        } else {
            aspectOutput(output, outputFlag);
        }
        */

    }

    private void normalOutput(DFEVector<DFEVar> output, DFEVar outputFlag) {
        if (layerParams.getIsLastLayer()) {
            /* Last layer - cast from fixed point to dfe float. */
            DFEVectorType<DFEVar> rawOutputVectorType = new DFEVectorType<DFEVar>(
                    GlobalConfig.get().getCpuType(), channelFoldingFactor);
            io.output(getOutputName(),
                      output.cast(rawOutputVectorType),
                      rawOutputVectorType,
                      outputFlag);
        } else {
            io.output(getOutputName(), output, outputType, outputFlag);
        }
    }

    private void aspectOutput(DFEVector<DFEVar> output, DFEVar enable) {

        AspectChangeIO aspectIO = new AspectChangeIO(
                this,
                layerParams.getOutputVectorWidth()
                * (layerParams.getIsLastLayer() ? 4 : 2)
                * 8);
        Functional.F1<DFEVector<DFEVar>, DFEVector<DFEVar>> postProcess = null;

        if (layerParams.getIsLastLayer()) {
            postProcess = new Functional.F1<DFEVector<DFEVar>, DFEVector<DFEVar>>() {
                public DFEVector<DFEVar> call(DFEVector<DFEVar> v) {
                    DFEVectorType<DFEVar> rawAspectOutputType = 
                        new DFEVectorType<DFEVar>(GlobalConfig.get().getCpuType(), v.getSize());
                    return v.cast(rawAspectOutputType);
                }
            };

        } else {
            postProcess = new Functional.F1<DFEVector<DFEVar>, DFEVector<DFEVar>>() {
                public DFEVector<DFEVar> call(DFEVector<DFEVar> v) {
                    return v;
                }
            };

        }

        DFEVectorType<DFEVar> outputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.get().getDataType(), layerParams.getNumOutputs());

        aspectIO.outputScheduled(
                getOutputName(), outputVectorType, output, enable,
                layerParams.getOutputVectorWidth(),
                postProcess);

    }

    private String getOutputName() {
        return "y";
    }

    private DFEVar poolDividend(DFEVar row, DFEVar col) {
        int lastRowTopLeft = (outputDimension.height() - 1) * stride;
        int lastColTopLeft = (outputDimension.width() - 1) * stride;
        int heightResidue = inputDimension.height() - lastRowTopLeft;
        int widthResidue = inputDimension.width() - lastColTopLeft;
        int lastRow = lastRowTopLeft + poolingDim / 2;
        int lastCol = lastColTopLeft + poolingDim / 2;

        final DFEVar fullDim = constant.var(
                GlobalConfig.get().getDataType(), 1.0 / ((double) poolingDim * poolingDim));
        final DFEVar rowBorder = constant.var(
                GlobalConfig.get().getDataType(), 1.0 / ((double) poolingDim * heightResidue));
        final DFEVar colBorder = constant.var(
                GlobalConfig.get().getDataType(), 1.0 / ((double) poolingDim * widthResidue));
        final DFEVar corner = constant.var(
                GlobalConfig.get().getDataType(), 1.0 / ((double) heightResidue * widthResidue));


        if (heightResidue != poolingDim && widthResidue != poolingDim) {
            return (row.eq(lastRow)
                    ? (col.eq(lastCol)
                        ? corner /* row == last && col == last */
                        : rowBorder /* row == last && col != last */)
                    : (col.eq(lastCol)
                        ? colBorder /* row != last && col == last */
                        : fullDim /* row != last && col != last */));

        } else if (heightResidue != poolingDim) {
            return (row.eq(lastRow) ? rowBorder : fullDim);

        } else if (widthResidue != poolingDim) {
            return (col.eq(lastCol) ? colBorder : fullDim);

        } else {
            return fullDim;
        }
    }
}
