package fpgaconvnet.kernels;

import java.lang.RuntimeException;
import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;

import fpgaconvnet.GlobalConfig;
import fpgaconvnet.IterationCounter;
import fpgaconvnet.Utils;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;
import fpgaconvnet.lib.CpuInitWeightsCounter;
import fpgaconvnet.lib.LookAheadCounter;
import fpgaconvnet.lib.ConvolutionAccumulator;


public class ConvolutionUnitKernel extends ConvolutionKernelBase {

    public enum WeightsLoadStrategy {
        INIT_FROM_CPU,
        STREAM_FROM_LMEM,
        WITH_CACHE,
    };

    private final int kernelDim;
    private final DFEVectorType<DFEVar> inputVectorType;
    private final DFEVectorType<DFEVar> outputVectorType;
    private final DFEVectorType<DFEVar> workerOutputVectorType;
    private final LayerParameter layerParams;
    private final ConvolutionParameter convParams;
    private final int convFoldingFactor;
    private final int kernelFoldingFactor;
    private final int totalAddressCount;
    private final IterationCounter ctr;

    private DFEVector<DFEVar> lmemWeightsInput = null;
    private DFEVector<DFEVar> cpuWeightsInput = null;
    private CpuInitWeightsCounter cpuInitWeightsCounter = null;
    private LookAheadCounter lookAheadCounter = null;
    private ConvolutionAccumulator accumulator;

    public ConvolutionUnitKernel(KernelParameters kp, LayerParameter params) {
        super(kp, params);
        convParams = params.getConv();
        layerParams = params;
        kernelDim = params.getConv().getKernelSize();

        ctr = new IterationCounter(layerParams);
        inputVectorType = new DFEVectorType<DFEVar>(GlobalConfig.dataType, kernelDim * kernelDim);
        workerOutputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType, layerParams.getConv().getConvFoldingFactor());
        outputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType, layerParams.getNumOutputs());

        convFoldingFactor = layerParams.getConv().getConvFoldingFactor();
        kernelFoldingFactor = layerParams.getConv().getKernelFoldingFactor();
        totalAddressCount = iterCounter.getWeightIterations() * getKernelIterations();

        DFEVar inputControlFlag = null;
        List<DFEVector<DFEVar>> workerOutputList = new ArrayList<DFEVector<DFEVar>>();

        switch (getWeightsLoadStrategy()) {
        case INIT_FROM_CPU:
            cpuInitWeightsCounter = new CpuInitWeightsCounter(this, layerParams);
            inputControlFlag = cpuInitWeightsCounter.getInputControlFlag();
            break;

        case STREAM_FROM_LMEM:
        case WITH_CACHE:
            lookAheadCounter = new LookAheadCounter(this, layerParams);
            inputControlFlag = lookAheadCounter.getInputControlFlag();
            break;

        }

        for (int workerId = 0 ; workerId < params.getConv().getWorkerFactor() ; workerId++) {

            DFEVector<DFEVar> inputWindow = io.input(
                    getInputName(workerId), inputVectorType, inputControlFlag);

            DFEVector<DFEVar> output = workerOutputVectorType.newInstance(this);
            final DFEVar[] pixelVars = new DFEVar[layerParams.getConv().getKernelFoldingFactor()];
            final DFEVar[][] weightVars = new DFEVar[convFoldingFactor][kernelFoldingFactor];

            for (int multId = 0; multId < layerParams.getConv().getKernelFoldingFactor(); multId++) {
                pixelVars[multId] = getConvPixel(multId, inputWindow);
            }

            for (int convUnitIndex = 0; convUnitIndex < convFoldingFactor; convUnitIndex++) {
                DFEVar convUnitOutput = constant.var(GlobalConfig.dataType, 0.0);

                for (int multId = 0; multId < kernelFoldingFactor; multId++) {

                    /* Determine the weight fetching strategy based on the foldingFactors. */
                    weightVars[convUnitIndex][multId] = getConvWeights(
                            workerId, convUnitIndex, multId);

                    convUnitOutput = convUnitOutput
                            + pixelVars[multId] * weightVars[convUnitIndex][multId];

                }
                output[convUnitIndex] <== convUnitOutput;
            }
            workerOutputList.add(output);

            if (workerId == 0) {
                if (cpuInitWeightsCounter != null) {
                    cpuInitWeightsCounter.getWeightAddress().simWatch("weight_addr");
                    cpuInitWeightsCounter.getWeightsInputFlag().simWatch("init_weights");
                    cpuInitWeightsCounter.getConvIter().simWatch("conv_iter");
                    cpuInitWeightsCounter.getKernelIter().simWatch("kernel_iter");
                }
                if (lookAheadCounter != null) {
                    lookAheadCounter.getPixelAddress().simWatch("pixel_address");
                    lookAheadCounter.getWeightAddress().simWatch("weight_address");
                    lookAheadCounter.getEnableSignal().simWatch("enable_signal");
                }
                inputControlFlag.simWatch("input_control_flag");
                weightVars[0][0].simWatch("weight");
                pixelVars[0].simWatch("pixel");
            }
        }

        accumulator = new ConvolutionAccumulator(this, layerParams);
        accumulator.setInput(workerOutputList);
        accumulator.setBiasInput(
                io.input(getBiasInputName(),
                    GlobalConfig.dataType,
                    accumulator.getIsInitializingWeights()));
        if (lookAheadCounter != null) {
            accumulator.setEnableSignal(lookAheadCounter.getEnableSignal());
        } else {
            accumulator.setEnableSignal(cpuInitWeightsCounter.getEnableSignal());
        }

        DFEVar initFlag = io.scalarInput("init", dfeUInt(1));
        initFlag.simWatch("init_flag");
        if (cpuInitWeightsCounter != null) {
            cpuInitWeightsCounter.setInitFlag(initFlag);
        } else if (lookAheadCounter != null) {
            lookAheadCounter.setInitFlag(initFlag);
        } else {
            throw new RuntimeException("Error");
        }
        accumulator.setInitFlag(initFlag);

        DFEVar outputControlFlag = accumulator.getOutputControlFlag();

        switch (getWeightsLoadStrategy()) {
        case INIT_FROM_CPU:
            outputControlFlag = outputControlFlag & cpuInitWeightsCounter.getEnableSignal();
            break;

        case STREAM_FROM_LMEM:
        case WITH_CACHE:
            outputControlFlag = outputControlFlag & lookAheadCounter.getEnableSignal();
            break;

        }

        if (layerParams.getIsLastLayer()) {
            /* Last layer - cast from fixed point to dfe float. */
            DFEVectorType<DFEVar> rawOutputVectorType = new DFEVectorType<DFEVar>(
                    GlobalConfig.cpuType, layerParams.getNumOutputs());
            DFEVector<DFEVar> rawOutput = rawOutputVectorType.newInstance(this);

            for (int i = 0 ; i < layerParams.getNumOutputs() ; i++) {
                rawOutput[i] <== accumulator.getOutput()[i].cast(GlobalConfig.cpuType);
            }
            io.output(getOutputName(), rawOutput, rawOutputVectorType, outputControlFlag);

        } else {
            io.output(getOutputName(), accumulator.getOutput(), outputVectorType, outputControlFlag);
        }
    }

    /* initCycles used only in CPU initialization. */
    public int initCycles() {
        if (cpuInitWeightsCounter != null) {
            return cpuInitWeightsCounter.initCycles();
        } else if (lookAheadCounter != null) {
            return lookAheadCounter.initCycles();
        }

        throw new RuntimeException("Error");
    }
    
    public int biasInitStreamSize() {
        return ctr.getBiasInitCycles();
    }

    public int kernelsInitStreamSize() {
        // size of every weight input Vector.
        return cpuInitWeightsCounter.initCycles()
            * layerParams.getConv().getKernelFoldingFactor();
    }

    public int cyclesPerImage() {
        int totalOutputPixels = layerParams.getOutputHeight()
                                * layerParams.getOutputWidth();
        int cyclesPerPixel = getSchedulerIterations()
                * getConvolutionIterations()
                * getKernelIterations();
        return totalOutputPixels * cyclesPerPixel;
    }

    public String getInputName(int workerId) {
        return "input_" + workerId;
    }

    public String getCpuWeightsInputName() {
        return "weights_input";
    }

    public String getLMemWeightName() {
        return "weight_lmem";
    }

    public String getOutputName() {
        return "output";
    }

    public String getBiasInputName() {
        return "input_bias";
    }

    public WeightsLoadStrategy getWeightsLoadStrategy() {
        int totalRomSize =
                getConvolutionIterations() * getSchedulerIterations()
                * (convParams.getWorkerFactor() * convParams.getConvFoldingFactor());
        if (convParams.getBramFactor() >= totalRomSize) {
            return WeightsLoadStrategy.INIT_FROM_CPU;

        } else if (convParams.getLookAhead() == 1) {
            return WeightsLoadStrategy.STREAM_FROM_LMEM;

        } else {
            return WeightsLoadStrategy.WITH_CACHE;

        }
    }

    private DFEVar getConvPixel(
            int multiplierNumber, DFEVector<DFEVar> inputWindow) {
        final DFEVar[] pixelChoices = new DFEVar[getKernelIterations()];
        for (int i = 0; i < getKernelIterations() ; i++) {
            int idx = multiplierNumber + i * layerParams.getConv().getKernelFoldingFactor();

            if (idx < inputWindow.getSize()) {
                pixelChoices[i] = inputWindow[idx];
            } else {
                pixelChoices[i] = constant.var(GlobalConfig.dataType, 0);
            }
        }

        switch (getWeightsLoadStrategy()) {
        case INIT_FROM_CPU:
            if (getKernelIterations() == 1) {
                return inputWindow[multiplierNumber];
            }
            return control.mux(cpuInitWeightsCounter.getKernelIter(), pixelChoices);

        case STREAM_FROM_LMEM:
        case WITH_CACHE:
            /* This is fine because weightIterations is constrainted to be either a factor or
             * a multiple (the if-case) of convolutionIterations()
             */
            if (ctr.getWeightIterations() >= ctr.getConvolutionIterations()) {
                if (pixelChoices.length == 1) {
                    return pixelChoices[0];
                }
                return control.mux(lookAheadCounter.getKernelIter(), pixelChoices);

            } else {
                DFEVar pixel;

                if (pixelChoices.length == 1) {
                    pixel = pixelChoices[0];
                } else {
                    pixel = control.mux(lookAheadCounter.getKernelIter(), pixelChoices);
                }

                if (convParams.getLookAhead() == 1) {
                    return pixel;

                } else {
                    Memory<DFEVar> pixelsMem = mem.alloc(
                            GlobalConfig.dataType,
                            convParams.getLookAhead() * getKernelIterations());
                    pixelsMem.write(
                            lookAheadCounter.getPixelAddress(),
                            pixel,
                            lookAheadCounter.getPixelWriteEnable());

                    return (lookAheadCounter.getPixelWriteEnable()
                            ? pixel
                            : pixelsMem.read(lookAheadCounter.getPixelAddress()));
                }
            }
        }

        /* Makes compiler happy. */
        return null;
    }

    private int getWeightInputSize() {
        final int size =
                layerParams.getConv().getWorkerFactor()
                * layerParams.getConv().getConvFoldingFactor()
                * layerParams.getConv().getKernelFoldingFactor();
        final int element_byte_size =
            (GlobalConfig.fracBits + GlobalConfig.intBits) / 8;

        return Utils.divCeil(size, GlobalConfig.burstSizeBytes / element_byte_size)
                * (GlobalConfig.burstSizeBytes / element_byte_size);
    }

    private DFEVector<DFEVar> getLMemWeightsInput() {

        /* TODO(fyq14): Optimize this. */
        DFEVectorType<DFEVar> weightInputType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType, getWeightInputSize());

        if (lmemWeightsInput != null) {
            return lmemWeightsInput;

        } else if (getWeightsLoadStrategy() == WeightsLoadStrategy.WITH_CACHE
                || getWeightsLoadStrategy() == WeightsLoadStrategy.STREAM_FROM_LMEM) {
            System.out.println(
                    "LMem input size in bytes = "
                    + getWeightInputSize());

            lmemWeightsInput = io.input(
                    getLMemWeightName(),
                    weightInputType,
                    lookAheadCounter.getWeightsInputFlag());
            return lmemWeightsInput;

        } else {
            throw new RuntimeException("getLMemWeightsInput() should only be used from a"
                    + " LMem-initialized weights net.");

        }
    }

    private DFEVector<DFEVar> getCpuWeightsInput() {
        if (cpuWeightsInput != null) {
            return cpuWeightsInput;

        } else if (getWeightsLoadStrategy() == WeightsLoadStrategy.INIT_FROM_CPU) {
            DFEVectorType<DFEVar> weightInputVectorType =
                new DFEVectorType<DFEVar>(
                    GlobalConfig.dataType,
                    layerParams.getConv().getKernelFoldingFactor());
            cpuWeightsInput = io.input(
                    getCpuWeightsInputName(),
                    weightInputVectorType,
                    cpuInitWeightsCounter.getWeightsInputFlag());
            return cpuWeightsInput;

        } else {
            throw new RuntimeException("getCpuWeightsInput() should only be used from a"
                    + " host-initialized weights net.");

        }

    }

    private Memory<DFEVector<DFEVar>> filtersRom = null;
    private DFEVector<DFEVar> cycleWeightsRead = null;
    private DFEVectorType<DFEVar> weightsMemoryType = null;

    private Memory<DFEVector<DFEVar>> retrieveWeightsRom() {
        if (filtersRom != null) {
            return filtersRom;
        }

        switch (getWeightsLoadStrategy()) {
        case INIT_FROM_CPU:
        case WITH_CACHE:
            weightsMemoryType = new DFEVectorType<DFEVar>(
                    GlobalConfig.dataType, getTotalMultipliers());
            return filtersRom = mem.alloc(
                    weightsMemoryType,
                    Math.max(2, totalAddressCount));

        default:
            throw new RuntimeException("Retrieve weight roms failed");
        }
    }

    private int getTotalMultipliers() {
        return convParams.getWorkerFactor()
                * convParams.getConvFoldingFactor()
                * convParams.getKernelFoldingFactor();
    }

    private DFEVector<DFEVar> retrieveCycleWeightsRead() {
        if (cycleWeightsRead != null) {
            return cycleWeightsRead;
        }

        if (getWeightsLoadStrategy() == WeightsLoadStrategy.INIT_FROM_CPU) {
            filtersRom = retrieveWeightsRom();
            DFEVector<DFEVar> inputVec = getCpuWeightsInput();
            DFEVector<DFEVar> weightsInputAccumulator = weightsMemoryType.newInstance(this);

            for (int worker = 0 ; worker < convParams.getWorkerFactor() ; worker++) {
                for (int conv = 0 ; conv < convParams.getConvFoldingFactor() ; conv++) {
                    for (int mult = 0 ; mult < convParams.getKernelFoldingFactor() ; mult++) {
                        int idx = (
                                (worker * (convParams.getConvFoldingFactor()
                                           * convParams.getKernelFoldingFactor()))
                                + (conv * convParams.getKernelFoldingFactor())
                                + mult);
                        optimization.pushPipeliningFactor(0.0);
                        weightsInputAccumulator[idx] <== (
                                cpuInitWeightsCounter.getIsWorkerConvTurn(worker, conv)
                                ? inputVec[mult]
                                : stream.offset(weightsInputAccumulator[idx], -1));
                        optimization.popPipeliningFactor();
                    }
                }
            }

            filtersRom.write(
                    cpuInitWeightsCounter.getInitAddress(),
                    weightsInputAccumulator,
                    cpuInitWeightsCounter.getWriteEnable());
            return cycleWeightsRead = filtersRom.read(cpuInitWeightsCounter.getWeightAddress());

        } else if (getWeightsLoadStrategy() == WeightsLoadStrategy.WITH_CACHE) {
            filtersRom = retrieveWeightsRom();
            DFEVector<DFEVar> inputVec = getLMemWeightsInput();
            DFEVector<DFEVar> originalVec = filtersRom.read(
                    lookAheadCounter.getWeightAddress());
            DFEVector<DFEVar> writeVec = weightsMemoryType.newInstance(this);
            for (int i = 0 ; i < getTotalMultipliers() ; i++) {
                writeVec[i] <== inputVec[i];
            }

            filtersRom.write(
                    lookAheadCounter.getWeightAddress(),
                    writeVec,
                    lookAheadCounter.getWeightWriteEnable());
            return cycleWeightsRead = originalVec;

        } else {
            throw new RuntimeException(
                    "cannot retrieve cycle on chip in streaming from LMem.");
        }
    }


    public DFEVar getConvWeights(
            int workerId, int convUnitIndex, int multId) {
        int idx;

        switch (getWeightsLoadStrategy()) {
        case INIT_FROM_CPU:
        case WITH_CACHE:
            idx = workerId;
            idx = (idx * convParams.getConvFoldingFactor()) + convUnitIndex;
            idx = (idx * convParams.getKernelFoldingFactor()) + multId;

            return retrieveCycleWeightsRead()[idx];

        case STREAM_FROM_LMEM:
            idx = workerId;
            idx = (idx * convParams.getConvFoldingFactor()) + convUnitIndex;
            idx = (idx * convParams.getKernelFoldingFactor()) + multId;
            return getLMemWeightsInput()[idx];

        }

        /* Makes compiler happy. */
        return null;
    }

    public int lmemStreamSizePerPixel() {
        return getTotalIterations() * getWeightInputSize();
    }
}
