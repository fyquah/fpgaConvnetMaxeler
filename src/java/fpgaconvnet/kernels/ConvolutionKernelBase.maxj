package fpgaconvnet.kernels;

import java.util.List;
import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import fpgaconvnet.protos.Parameters;
import fpgaconvnet.IterationCounter;


public abstract class ConvolutionKernelBase extends Kernel {
    
    private final Parameters.LayerParameter layerParams;
    private final IterationCounter iterCounter;

    public ConvolutionKernelBase (KernelParameters kp, Parameters.LayerParameter argParams) {
        super(kp);
        layerParams = argParams;
        iterCounter = new IterationCounter(layerParams);
    }

    public int getKernelIterations() {
        return iterCounter.getKernelIterations();
    }

    public int getConvolutionIterations() {
        return iterCounter.getConvolutionIterations();
    }

    /* The number of input channels a worker needs to handle. */
    public int getSchedulerIterations() {
        return iterCounter.getSchedulerIterations();
    }

    public List<Integer> getSchedulerChannels(int workerIndex) {
        List<Integer> ret = new ArrayList<Integer>();
        int workerFactor = layerParams.getConv().getWorkerFactor();
        for (int i = 0 ; i < getSchedulerIterations() ; i++) {
            int channel = (i * workerFactor) + workerIndex;
            if (channel >= layerParams.getNumInputs()) {
                ret.add(-1);
            } else {
                ret.add(channel);
            }
        }
        return ret;
    }

    public static void setDebugMode(boolean flag) {
        debugMode = flag;
    }

    private static boolean debugMode = false;
    protected DFEVar debugFlag() {
        if (debugMode) {
            return constant.var(dfeBool(), 1);
        } else {
            return constant.var(dfeBool(), 0);
        }
    }
}
