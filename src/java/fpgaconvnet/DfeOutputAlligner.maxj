package fpgaconvnet;
// package nothing;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class DfeOutputAlligner extends Kernel {
    private final DFEVectorType<DFEVar> vectorType;

    private DFEVar muxVectorOutput(DFEVar ctr, DFEVector<DFEVar> x) {
        DFEVar[] arr = new DFEVar[x.getSize()];
        for (int i = 0 ; i < x.getSize() ; i++) {
            arr[i] = x[i].cast(GlobalConfig.cpuType);
        }

        return control.mux(ctr, arr);
    }

    public DfeOutputAlligner(KernelParameters parameters, int inSize) {
        super(parameters);

        vectorType  = new DFEVectorType<DFEVar>(GlobalConfig.dataType, inSize);
        DFEVar output = GlobalConfig.cpuType.newInstance(this);

        if (inSize == 1) {
            DFEVector<DFEVar> x = io.input("x", vectorType);
            output <== x[0].cast(GlobalConfig.cpuType);
            io.output("y", output, GlobalConfig.cpuType);
        } else {
            DFEVar ctr = control.count.simpleCounter(Utils.ceilLog2(inSize), inSize);

            /*
            CounterChain chain = control.count.makeCounterChain();
            DFEVar exampleCtr = chain.addCounter(100, 1);
            DFEVar rowCtr = chain.addCounter(3, 1);
            DFEVar colCtr = chain.addCounter(3, 1);
            DFEVar ctr = chain.addCounter(inSize, 1);
            debug.simPrintf("OutputAlligner : row = %d, col = %d, chan = %d, example = %d\n",
                    rowCtr, colCtr, ctr, exampleCtr);
            */

            DFEVector<DFEVar> x = io.input("x", vectorType, ctr.eq(0));
            output <== muxVectorOutput(ctr, x);
            io.output("y", output, GlobalConfig.cpuType);
        }
    }
}
