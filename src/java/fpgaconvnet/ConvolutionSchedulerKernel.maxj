package fpgaconvnet;
import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;

import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;

/* 
 * io.input:
 *  x : DFEVector[inputChannels] 
 * io.output:
 *  - y0, y1, y2, ...., y{workerFactor - 1}
 *  where y_i is a vector of length kernelDim * kernelDim.
 *
 * When the number of workers is a factor of the number of input channels, the outputs are
 * scheduled as such, for example in the case of three workers and n_in input channels.
 *
 * - worker 0: {0, 3, ..., n_in - 3}
 * - worker 1: {1, 4, ..., n_in - 2}
 * - worker 2: {2, 5, ..., n_in - 1}
 */

public class ConvolutionSchedulerKernel extends ConvolutionKernelBase {
    private final DFEVectorType<DFEVar> inputVectorType, outputVectorType;
    private final SlidingWindow[] slidingWindows;
    private final DFEVector<DFEVar> input;
    private final List<DFEVector<DFEVar>> output_y;
    private final Dimension inputDimension;
    private final int kernelDim, workerFactor;
    private final DFEVar iter, row, col;
    private final CounterChain masterChain;
    private final LayerParameter layerParams;

    public ConvolutionSchedulerKernel(KernelParameters kp, LayerParameter argLayerParams) {
        super(kp, argLayerParams);

        layerParams = argLayerParams;
        inputDimension = Utils.layerInputDimension(layerParams);
        kernelDim = layerParams.getConv().getKernelSize();
        workerFactor = layerParams.getConv().getWorkerFactor();
        masterChain = control.count.makeCounterChain();
        inputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType,
                inputDimension.channels());
        outputVectorType = new DFEVectorType<DFEVar>(GlobalConfig.dataType, kernelDim * kernelDim);
        input = inputVectorType.newInstance(this);
        output_y = new ArrayList<DFEVector<DFEVar>>();;
        slidingWindows = new SlidingWindow[inputDimension.channels()];
        for (int i = 0 ; i < workerFactor; i++) {
            output_y.add(outputVectorType.newInstance(this));
        }
        for (int i = 0 ; i < inputDimension.channels() ; i++) {
            slidingWindows[i] = new SlidingWindow(
                this,
                input[i],
                inputDimension.height(),
                inputDimension.width(),
                kernelDim,
                new OffsetExpr(getSchedulerIterations()));
        }
        row = Utils.chainCounterOrZero(this, masterChain, inputDimension.height());
        col = Utils.chainCounterOrZero(this, masterChain, inputDimension.width());
        iter = Utils.chainCounterOrZero(this, masterChain, getSchedulerIterations());

        if (layerParams.getIsFirstLayer()) {
            /* First layer - cast from dfefloat to fixed point. */
            DFEVectorType rawInputVectorType = new DFEVectorType<DFEVar>(
                    GlobalConfig.cpuType, inputDimension.channels());
            DFEVector<DFEVar> rawInput = io.input(
                    getInputName(), rawInputVectorType, iter.eq(0));
            input <== rawInput.cast(inputVectorType);
        } else {
            input <== io.input(getInputName(), inputVectorType, iter.eq(0));
        }

        DFEVar outputControlFlag = ~isBorder(row, col);
        for (int workerId = 0 ; workerId < workerFactor ; workerId++) {
            List<Integer> channelList = getSchedulerChannels(workerId);
            output_y[workerId] <== toMuxedPixel(iter, channelList);
            io.output(getOutputName(workerId),
                      output_y[workerId],
                      outputVectorType,
                      outputControlFlag);
        }

        /* For debugging only. */
        DFEVar cycle = control.count.simpleCounter(32);
        String s_kernel = "[\n";
        for (int i = 0 ; i < kernelDim ; i++) {
            s_kernel += "[";
            for (int j = 0; j < kernelDim ; j++) {
                s_kernel += "%.3f, "; 
            }
            s_kernel += "],\n";
        }
        s_kernel += "]\n";
        for (int i = 0 ; i < workerFactor ; i++) {
            DFEVar[] debugValues = new DFEVar[3 + kernelDim * kernelDim];
            debugValues[0] = outputControlFlag;
            debugValues[1] = row;
            debugValues[2] = col;

            for (int j = 0 ; j < kernelDim * kernelDim ; j++) {
                debugValues[3 + j] = output_y[i][j];
            }
            debug.simPrintf("ConvolutionScheduler[layer = " + layerParams.getLayerId() + "] "
                            + "outputFlag = %d row = %d col = %d worker = " + i + "\n"
                            + "pixel_window = " + s_kernel,
                            debugValues);
        }
    }

    public int cyclesPerImage() {
        return (inputDimension.width() * inputDimension.height() * getSchedulerIterations());
    }

    public String getInputName() {
        return "input";
    }

    public String getOutputName(int workerId) {
        return "output_x_" + workerId;
    }

    protected DFEVar isBorder(DFEVar row, DFEVar col) {
        DFEVar flag = constant.var(dfeBool(), 0);
        for (int i = 0 ; i < (kernelDim - 1) / 2 ; i++) {
            flag = flag | row.eq(i) | col.eq(i)
                | row.eq(inputDimension.height() - 1 - i)
                | col.eq(inputDimension.width() - 1 - i);
        }

        return flag;
    }

    protected DFEVector<DFEVar> zeroVector(DFEVectorType<DFEVar> type) {
        DFEVector<DFEVar> newVector = type.newInstance(this);

        for (int i = 0 ; i < newVector.getSize() ; i++) {
            newVector[i] <== constant.var(GlobalConfig.dataType, 0);
        }

        return newVector;
    }

    protected DFEVector<DFEVar> toMuxedPixel(DFEVar iter, List<Integer> channels) {
        Utils.assertTrue(channels.size() == getSchedulerIterations());

        if (getSchedulerIterations() == 1) {
            Utils.assertTrue(channels.size() == 1);
            return slidingWindows[channels[0]].output;
        }

        List<DFEVector<DFEVar>> arr = new ArrayList<DFEVector<DFEVar>>();
        for (int chan : channels) {
            if (chan != -1) {
                arr.add(slidingWindows[chan].output);
            } else {
                arr.add(zeroVector(outputVectorType));
            }
        }
        return control.mux(iter, arr);
    }
}
