package fpgaconvnet;

import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;


public class IterationCounter {

    private final LayerParameter layerParams;
    private final ConvolutionParameter convParams;

    public IterationCounter(LayerParameter argLayerParams) {
        layerParams = argLayerParams;
        convParams = layerParams.getConv();
    }

    public int getTotalIterations() {
        return getKernelIterations() * getConvolutionIterations() * getSchedulerIterations();
    }

    public int getRevisitIterations() {
        return Utils.divCeil(
                getConvolutionIterations() * getSchedulerIterations(), getWeightIterations());
    }

    public int getLastWeightIterations() {
        // This is definitely divisible.
        int romPerConvolver =
                convParams.getBramFactor()
                / (convParams.getWorkerFactor() * convParams.getConvFoldingFactor());

        if (romPerConvolver < getConvolutionIterations()) {
            return getWeightIterations();

        } else {
            int ret = (
                    getSchedulerIterations() * getConvolutionIterations()) % romPerConvolver;

            if (ret == 0) {
                return getWeightIterations();
            } else {
                return ret;
            }
        }
    }

    public int getWeightIterations() {
        final int totalRomSize =
                getConvolutionIterations() * getSchedulerIterations()
                * (convParams.getWorkerFactor() * convParams.getConvFoldingFactor());

        if (convParams.getBramFactor() >= totalRomSize) {
            return getConvolutionIterations() * getSchedulerIterations();

        } else {
            return convParams.getBramFactor()
                    / (convParams.getWorkerFactor() * convParams.getConvFoldingFactor());

        }
    }

    /* The number of cycles to perform _one_ convolution */
    public int getKernelIterations() {
        int kernelDim = layerParams.getConv().getKernelSize();
        return Utils.divCeil(kernelDim * kernelDim, layerParams.getConv().getKernelFoldingFactor());
    }

    /* The number of loop iterations required to convolve a input channel's window with all
     * the the filters that concerned it.
     */
    public int getConvolutionIterations() {
        return Utils.divCeil(
                layerParams.getNumOutputs(), layerParams.getConv().getConvFoldingFactor()); 
    }

    /* The number of input channels a worker needs to handle. */
    public int getSchedulerIterations() {
        return Utils.divCeil(layerParams.getNumInputs(), layerParams.getConv().getWorkerFactor());
    }

    /* The number of cycles required to populate the bias. */
    public int getBiasInitCycles() {
        // maxeler requires streams to be a multiple of 16 bytes = 4 * 4 bytes.
        int bias_bytes = (GlobalConfig.fracBits + GlobalConfig.intBits) / 8;
        int stream_chunk_size = 16 / bias_bytes;
        return Utils.divCeil(layerParams.getNumOutputs(), stream_chunk_size)
            * stream_chunk_size;
    }

    /* The number of cycles required to populate the BRAM weights (relevant only
     * if we are storing all weights in BRAM
     */
    public int getWeightsRealInitCycles() {
        return layerParams.getConv().getWorkerFactor()
                * layerParams.getConv().getConvFoldingFactor()
                * getSchedulerIterations()
                * getConvolutionIterations()
                * getKernelIterations();
    }

    /* The number of cycles required to populate the BRAM weights, including
     * cycles where the FPGA simply stalls and do nothing (to cope with the
     * stream size multiple requirements).
     */
    public int getWeightsInitCycles() {
        int number_bytes = (GlobalConfig.fracBits + GlobalConfig.intBits) / 8;
        int stream_chunk_size = 16 / number_bytes;
        int multipleBase =
                ((int) Utils.lcm(
                    stream_chunk_size,
                    layerParams.getConv().getKernelFoldingFactor()))
                / layerParams.getConv().getKernelFoldingFactor();
        return Utils.divCeil(
                getWeightsRealInitCycles(), multipleBase) * multipleBase;

    }
}
