package fpgaconvnet;
// package nothing;

import org.junit.runner.JUnitCore;
import org.junit.runner.Request;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import java.util.List;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;


public class GenericNetworkBuilder {
    public static class NetworkEngineParameters extends EngineParameters {
        private final String s_descriptor = "descriptor";

        @Override
        protected void declarations() {
            declareParam(s_descriptor, DataType.STRING, "");
        }

        public String getDescriptor() {
            return getParam(s_testKlass);
        }
    }

    public static void resource_bench(String[] args) {
        ResourceBenchmarkParameters params = new ResourceBenchmarkParameters(args);
        ResourceBenchmarkManager manager = new ResourceBenchmarkManager(
            params,
            params.getConvFoldingFactor(),
            params.getKernelFoldingFactor());
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;
		// was previously 125 (didn't work due to failed timing)
        config.setDefaultStreamClockFrequency(75);

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void le_net(String[] args) {
        EngineParameters params = new EngineParameters(args);
        LeNetManager manager = new LeNetManager(params);
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    // TODO(ADD_NETWORK): Adding a new work should look something like this:
    // public static void le_net(String[] args) {
    //     EngineParameters params = new EngineParameters(args);
    //     MyNewNetworkManager manager = new MyNewNetworkManager(params);
    //     BuildConfig buildConfig = manager.getBuildConfig();
    //     buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
    //     buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
    //     buildConfig.setMPPRParallelism(params.getMPPRThreads());
    //     buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

    //     manager.createSLiCinterface(manager.interfaceDefault());
    //     manager.build();
    // }

    public static void main(String[] args) {
        NetworkEngineParameters params = new NetworkEngineParameters(args);
        System.out.println(params.getDescriptor());
    }

}

