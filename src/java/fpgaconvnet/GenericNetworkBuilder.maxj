package fpgaconvnet;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import com.google.protobuf.TextFormat;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;

import fpgaconvnet.protos.Parameters;
import fpgaconvnet.protos.Parameters.Network;
import fpgaconvnet.protos.Parameters.LayerParameter;
import fpgaconvnet.protos.Parameters.ConvolutionParameter;
import fpgaconvnet.protos.Parameters.PoolingParameter;


public class GenericNetworkBuilder {
    public static class NetworkEngineParameters extends EngineParameters {
        private final String s_descriptor = "descriptor";

        @Override
        protected void declarations() {
            declareParam(s_descriptor, DataType.STRING, "");
        }

        public String getDescriptor() {
            return getParam(s_descriptor);
        }

        public NetworkEngineParameters(String[] args) {
            super(args);
        }
    }

    public static void resource_bench(String[] args) {
        ResourceBenchmarkParameters params = new ResourceBenchmarkParameters(args);
        ResourceBenchmarkManager manager = new ResourceBenchmarkManager(
            params,
            params.getConvFoldingFactor(),
            params.getKernelFoldingFactor());
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;
		// was previously 125 (didn't work due to failed timing)
        config.setDefaultStreamClockFrequency(75);

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void le_net(String[] args) {
        EngineParameters params = new EngineParameters(args);
        LeNetManager manager = new LeNetManager(params);
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    private static String readFile(String fileName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        try {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append("\n");
                line = br.readLine();
            }
            return sb.toString();
        } finally {
            br.close();
        }
    }

    public static void main(String[] args) {
        NetworkEngineParameters params = new NetworkEngineParameters(args);
        String descriptorFileName = params.getDescriptor();
        try {
            String protoText = readFile(descriptorFileName);
            Parameters.Network.Builder networkParamsBuilder = Parameters.Network.newBuilder();
            TextFormat.getParser().merge(protoText, networkParamsBuilder);
            Parameters.Network networkParameters = new ParametersTransformer(
                    networkParamsBuilder.build()).transform();
            System.out.println(networkParameters.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

