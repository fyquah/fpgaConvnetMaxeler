package fpgaconvnet;

import com.google.protobuf.TextFormat;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;

import fpgaconvnet.protos.Parameters;


public class GenericNetworkBuilder {
    public static class NetworkEngineParameters extends EngineParameters {
        private final String s_descriptor = "descriptor";
        private final String s_fpgaId = "fpga_id";

        @Override
        protected void declarations() {
            declareParam(s_descriptor, DataType.STRING, "");
            declareParam(s_fpgaId, DataType.STRING, "0");
        }

        public String getDescriptor() {
            return getParam(s_descriptor);
        }

        public int getFpgaId() {
            return Integer.parseInt((String) getParam(s_fpgaId));
        }

        public NetworkEngineParameters(String[] args) {
            super(args);
        }
    }

    public static void main(String[] args) {
        try {
            NetworkEngineParameters engineParameters = new NetworkEngineParameters(args);
            String descriptorFileName = engineParameters.getDescriptor();
            String protoText = Utils.readFile(descriptorFileName);
            Parameters.Network.Builder networkParamsBuilder = Parameters.Network.newBuilder();
            TextFormat.getParser().merge(protoText, networkParamsBuilder);
            Parameters.Network networkParameters = new ParametersTransformer(
                    networkParamsBuilder.build()).transform();

            NetworkManager manager = new NetworkManager(
                    engineParameters, networkParameters, engineParameters.getFpgaId());
            BuildConfig buildConfig = manager.getBuildConfig();
            buildConfig.setBuildEffort(BuildConfig.Effort.HIGH);
            buildConfig.setMPPRCostTableSearchRange(1, 20);
            buildConfig.setMPPRParallelism(3);
            buildConfig.setEnableTimingAnalysis(true);
            manager.setBuildConfig(buildConfig);
            manager.build();

        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }
}
