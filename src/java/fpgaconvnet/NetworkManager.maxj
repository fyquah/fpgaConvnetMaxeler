package fpgaconvnet;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.lang.RuntimeException;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import fpgaconvnet.protos.Parameters;


public class NetworkManager extends CustomManager {

    private Properties prop;
    private List<ConvolutionLayer> convolutionLayers;
    private List<PoolingLayerKernel> poolingKernels;
    private List<KernelBlock> poolingKernelBlocks;
    private DfeInputAlligner inputAllignerKernel;
    private DfeOutputAlligner outputAllignerKernel;
    private KernelBlock inputAllignerBlock, outputAllignerBlock;
    private Parameters.Network networkParameters;

    private NetworkParameters[] getParameters() {
        return null;
    }

    private Dimension inputDimension() {
        NetworkParameters[] paramsArray = getParameters();
        return paramsArray[0].inputDimension();
    }

    private Dimension outputDimension() {
        NetworkParameters[] paramsArray = getParameters();
        return paramsArray[paramsArray.length - 1].inputDimension();
    }

    public EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();
        CPUTypes   type = CPUTypes.FLOAT;
        int        size = type.sizeInBytes();
        InterfaceParam  N    = ei.addParam("N", CPUTypes.INT);

        ei.setTicks("DfeInputAlligner", N * inputDimension().totalSize());
        NetworkParameters[] paramsArray = getParameters();
        int poolCount = 1;
        int convCount = 1;
        for (int i = 0 ; i < paramsArray.length ; i++) {
            if (paramsArray[i] instanceof ConvolutionParameters) {
                convolutionLayers[convCount-1].setKernelTimings(ei, N);
                convCount++;
            } else if (paramsArray[i] instanceof PoolingParameters) {
                ei.setTicks("pool" + poolCount, N * poolingKernels[poolCount - 1].cyclesPerImage());
                poolCount++;
            } else {
                // Code execution should not come here ...
                throw new RuntimeException("Unknown params type");
            }
        }
        ei.setStream(
                "x", type,
                N * inputDimension().totalSize() * size);
        ei.setStream(
                "y", type,
                N * outputDimension().totalSize() * size);

        return ei;
    }

    private void setupKernels() {
        NetworkParameters[] paramsArray = getParameters();
        int poolCount = 1;

        inputAllignerKernel = new DfeInputAlligner(
            makeKernelParameters("DfeInputAlligner"),
            paramsArray[0].inputDimension().channels()
        );
        for (int i = 0 ; i < paramsArray.length ; i++) {
            if (paramsArray[i] instanceof ConvolutionParameters) {
                convolutionLayers.add(
                        new ConvolutionLayer((ConvolutionParameters) paramsArray[i], this));
            } else if (paramsArray[i] instanceof PoolingParameters) {
                poolingKernels.add(
                        new PoolingLayerKernel(
                        makeKernelParameters("pool" + poolCount),
                        (PoolingParameters) paramsArray[i]));
                poolCount++;
            } else {
                // Code execution should not come here ...
                throw new RuntimeException("Unknown params type");
            }
        }
        outputAllignerKernel = new DfeOutputAlligner(
            makeKernelParameters("DfeOutputAlligner"),
            paramsArray[paramsArray.length - 1].outputDimension().channels()
        );
    }

    private void linkKernels() {
        DFELink cpuInputLink = addStreamFromCPU("x");
        DFELink cpuOutputLink = addStreamToCPU("y");
        NetworkParameters[] paramsArray = getParameters();
        int poolingUnitId = 0;
        int convLayerId = 0;

        inputAllignerBlock.getInput("x") <== cpuInputLink;
        DFELink prevOutput = inputAllignerBlock.getOutput("y");

        for (int i = 0 ; i < paramsArray.length ; i++) {
            if (paramsArray[i] instanceof PoolingParameters) {
                poolingKernelBlocks[poolingUnitId].getInput("x") <== prevOutput;
                prevOutput = poolingKernelBlocks[poolingUnitId].getOutput("y");
                poolingUnitId++;
            } else if (paramsArray[i] instanceof ConvolutionParameters) {
                convolutionLayers[convLayerId].getInput() <== prevOutput;
                prevOutput = convolutionLayers[convLayerId].getOutput();
                convLayerId++;
            } else {
                throw new RuntimeException("Unknown Params type");
            }
        }

        outputAllignerBlock.getInput("x") <== prevOutput;
        cpuOutputLink <== outputAllignerBlock.getOutput("y");
    }

    public void describeNetwork() {
        NetworkParameters[] paramsArray = getParameters();
        for (int i = 0 ; i < paramsArray.length ; i++) {
            System.out.println("====== Layer " + i + ": =====");
            paramsArray[i].print();
            System.out.println("");
        }
    }

    public NetworkManager(EngineParameters engineParameters, Parameters.Network networkParametersIn) {
        super(engineParameters);
        networkParameters = networkParametersIn;
        convolutionLayers = new ArrayList<ConvolutionLayer>();
        poolingKernels = new ArrayList<PoolingLayerKernel>();
        poolingKernelBlocks = new ArrayList<KernelBlock>();

        config.setDefaultStreamClockFrequency(networkParameters.getFrequency());
        describeNetwork();
        setupKernels();
        // TODO(fyq14): Make PoolingLayer class to wrap around the pooling layers kernel too.
        inputAllignerBlock = addKernel(inputAllignerKernel);
        outputAllignerBlock = addKernel(outputAllignerKernel);
        poolingKernelBlocks = new ArrayList<KernelBlock>();
        for (int i = 0 ; i < poolingKernels.size() ; i++) {
            poolingKernelBlocks.add(addKernel(poolingKernels[i]));
        }

        linkKernels();
    }
}
