package fpgaconvnet;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParamArray;

import fpgaconvnet.protos.Parameters;
import fpgaconvnet.kernels.*;


public class NetworkManager extends CustomManager {

    private List<ConvolutionLayer> convolutionLayers;
    private List<PoolingLayerKernel> poolingKernels;
    private List<KernelBlock> poolingKernelBlocks;
    /* NetworkParameters here are completely filled, (ie: earlier stages of the compilation process
     * has populated the parameters appropriately.
     */
    private Parameters.Network networkParameters;

    private static boolean isConvLayer(Parameters.LayerParameter layer) {
        return layer.getParamsCase().equals(Parameters.LayerParameter.ParamsCase.CONV);
    }

    private static boolean isPoolLayer(Parameters.LayerParameter layer) {
        return layer.getParamsCase().equals(Parameters.LayerParameter.ParamsCase.POOL);
    }

    private EngineInterface interfaceDefault () {
        EngineInterface ei = new EngineInterface();

        InterfaceParam N = ei.addParam("N", CPUTypes.UINT64);
        InterfaceParam init = ei.addParam("init", CPUTypes.UINT8);

        for (int i = 0 ; i < convolutionLayers.size() ; i++) {
            convolutionLayers[i].setKernelTimings(ei, N, init);
        }
        for (int i = 0; i < poolingKernels.size() ; i++) {
            ei.setTicks(poolingKernels[i].getName(), N * poolingKernels[i].cyclesPerImage());
        }

        Parameters.LayerParameter firstLayer = networkParameters.getLayer(0);
        Parameters.LayerParameter lastLayer = networkParameters.getLayer(
                networkParameters.getLayerCount() - 1);
        int inputSize = Utils.layerInputDimension(firstLayer).totalSize();
        int outputSize = Utils.layerOutputDimension(lastLayer).totalSize();

        ei.setStream("fromcpu", CPUTypes.FLOAT, N * inputSize * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("tocpu", CPUTypes.FLOAT, N * outputSize * CPUTypes.FLOAT.sizeInBytes());

        // configuring streams for ConvolutionLayers.
        int convLayerIndex = 0;

        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layerParams = networkParameters.getLayer(i);

            if (isConvLayer(layerParams)) {
                String convUnitKernelName = convolutionLayers[convLayerIndex]
                        .getConvolutionUnit()
                        .getKernel()
                        .getName();
                String accKernelName = convolutionLayers[convLayerIndex]
                        .getAccumulator()
                        .getKernel()
                        .getName();

                ei.setScalar(convUnitKernelName, "init", init);
                ei.setScalar(accKernelName, "init", init);
                initConvLayer(ei, layerParams, convolutionLayers[convLayerIndex], init);

                convLayerIndex++;
            }
        }

        ei.ignoreAll(Direction.IN_OUT);
        return ei;
    }

    private void initConvLayer(
            EngineInterface ei,
            Parameters.LayerParameter layerParams,
            ConvolutionLayer layer,
            InterfaceParam init) {

        final int streamSize = layer.getConvolutionUnit().getKernel().initStreamSize();

        ei.setStream(String.format("kernel_%d", layerParams.getLayerId()),
                     CPUTypes.FLOAT,
                     init ?
                     (streamSize * CPUTypes.FLOAT.sizeInBytes()) : 0);

        int biasStreamSize =
                layer.getAccumulator().getKernel().initCycles() * CPUTypes.FLOAT.sizeInBytes();

        ei.setStream(String.format("bias_%d", layerParams.getLayerId()),
                     CPUTypes.FLOAT,
                     init ? biasStreamSize : 0);
    }

    private void setupKernels() {
        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layer = networkParameters.getLayer(i);
            if (isConvLayer(layer)) {
                convolutionLayers.add(new ConvolutionLayer(layer, this));
            } else if (isPoolLayer(layer)) {
                KernelParameters kernelParameters = makeKernelParameters("pool" + i);
                poolingKernels.add(new PoolingLayerKernel(kernelParameters , layer));
            }
        }
    }

    private void linkKernels() {

        /* Data tranfer */
        DFELink fromCpu = addStreamFromCPU("fromcpu");
        DFELink toCpu = addStreamToCPU("tocpu");

        /* Kernel logic transfer */
        int poolingUnitId = 0;
        int convLayerId = 0;

        DFELink prevOutput = fromCpu;

        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layer = networkParameters.getLayer(i);
            if (isConvLayer(layer)) {
                convolutionLayers[convLayerId].getInput() <== prevOutput;
                prevOutput = convolutionLayers[convLayerId].getOutput();
                convLayerId++;

            } else if (isPoolLayer(layer)) {
                poolingKernelBlocks[poolingUnitId].getInput("x") <== prevOutput;
                prevOutput = poolingKernelBlocks[poolingUnitId].getOutput("y");
                poolingUnitId++;

            }
        }
        toCpu <== prevOutput;


        /* Weight initialization. */
        convLayerId = 0;
        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layer = networkParameters.getLayer(i);

            if (isConvLayer(layer)) {
                DFELink kernelDataStream = addStreamFromCPU(
                        String.format("kernel_%d", layer.getLayerId()));

                convolutionLayers[convLayerId].getFiltersInput() <== kernelDataStream;

                DFELink biasDataStream = addStreamFromCPU(
                        String.format("bias_%d", layer.getLayerId()));
                convolutionLayers[convLayerId].getBiasInput() <== biasDataStream;

                convLayerId++;
            }
        }
    }

    public NetworkManager(EngineParameters engineParameters, Parameters.Network networkParametersIn) {
        super(engineParameters);
        networkParameters = networkParametersIn;
        convolutionLayers = new ArrayList<ConvolutionLayer>();
        poolingKernels = new ArrayList<PoolingLayerKernel>();
        poolingKernelBlocks = new ArrayList<KernelBlock>();

        config.setAllowNonMultipleTransitions(true);
        debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));
        config.setDefaultStreamClockFrequency(networkParameters.getFrequency());
        System.out.println("Network compilation target:");
        System.out.println(networkParameters.toString());
        System.out.println("Frequency = " + networkParameters.getFrequency());
        setupKernels();

        // TODO(fyq14): Make PoolingLayer class to wrap around the pooling layers kernel too.
        poolingKernelBlocks = new ArrayList<KernelBlock>();
        for (int i = 0 ; i < poolingKernels.size() ; i++) {
            poolingKernelBlocks.add(addKernel(poolingKernels[i]));
        }
        linkKernels();

        /* Interfaces */
        createSLiCinterface(interfaceDefault());
    }
}
