package fpgaconvnet;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4MAIARingConnection;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MaxRingBidirectionalStream;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;


// import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemConfig;  /* FOR MAXCOMPILER 2018.1 */
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig; /* FOR MAXCOMPILER 2015.2 */

import fpgaconvnet.Utils.Tuple3;
import fpgaconvnet.protos.Parameters;
import fpgaconvnet.kernels.NullSinkKernel;
import fpgaconvnet.kernels.NullSourceKernel;


public class NetworkManager extends CustomManager {

    private NullSinkKernel nullSink = null;
    private NullSourceKernel nullSource = null;
    private final boolean isSimulation;
    private final int fpgaId;
    private final int bitstreamId;
    private LMemInterface lmem;
    private List<ComputationChain> computationChains;
    /* NetworkParameters here are completely filled, (ie: earlier stages of the compilation process
     * has populated the parameters appropriately.
     */
    private Parameters.Network networkParameters;

    private static boolean isConvLayer(Parameters.LayerParameter layer) {
        return layer.getParamsCase().equals(Parameters.LayerParameter.ParamsCase.CONV);
    }

    private static boolean isPoolLayer(Parameters.LayerParameter layer) {
        return layer.getParamsCase().equals(Parameters.LayerParameter.ParamsCase.POOL);
    }

    private static boolean isLrnLayer(Parameters.LayerParameter layer) {
        return layer.getParamsCase().equals(Parameters.LayerParameter.ParamsCase.LRN);
    }

    private static EngineInterface interfaceWrite(String name) {
        EngineInterface ei = new EngineInterface(name);
        InterfaceParam start = ei.addParam("start", CPUTypes.UINT64);
        InterfaceParam size = ei.addParam("size", CPUTypes.UINT64);
        InterfaceParam sizeInBytes = size;

        ei.setStream("data_in", CPUTypes.FLOAT, sizeInBytes);
        ei.setLMemLinear("cpu2lmem", start, sizeInBytes);
        ei.ignoreAll(Direction.IN_OUT);
        return ei;
    }

    private static EngineInterface interfaceRead(String name) {
        EngineInterface ei = new EngineInterface(name);
        InterfaceParam start = ei.addParam("start", CPUTypes.UINT64);
        InterfaceParam size = ei.addParam("size", CPUTypes.UINT64);
        InterfaceParam sizeInBytes = size;

        ei.setStream("data_out", CPUTypes.FLOAT, sizeInBytes);
        ei.setLMemLinear("lmem2cpu", start, sizeInBytes);
        ei.ignoreAll(Direction.IN_OUT);
        return ei;
    }

    private int getNumFpgaUsedInBitstream() {
        int numFpgaUsed = 0;

        for (int i = 0; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layerParams = networkParameters.getLayer(i);
            if (layerParams.getBitstreamId() == bitstreamId) {
                numFpgaUsed = Math.max(numFpgaUsed, layerParams.getFpgaId() + 1);
            }
        }

        if (numFpgaUsed == 0) {
            throw new RuntimeException(
                    "Cannot find any fpga that uses this bitstream ("
                    + bitstreamId + ")");
        }

        return numFpgaUsed;
    }

    private int getNumBitstream() {
        return networkParameters.getLayer(
                networkParameters.getLayerCount() - 1).getBitstreamId() + 1;
    }

    private int getFpgaInputSize() {
        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layerParams = networkParameters.getLayer(i);
            if (layerParams.getFpgaId() == fpgaId) {
                return layerParams.getInputHeight()
                        * layerParams.getInputWidth()
                        * layerParams.getNumInputs();
            }
        }

        throw new RuntimeException("No layer with fpga id == " + fpgaId);
    }

    private int getFpgaOutputSize() {
        for (int i = networkParameters.getLayerCount() - 1 ; i >= 0; i--) {
            Parameters.LayerParameter layerParams = networkParameters.getLayer(i);
            if (layerParams.getFpgaId() == fpgaId) {
                return layerParams.getOutputHeight()
                        * layerParams.getOutputWidth()
                        * layerParams.getNumOutputs();
            }
        }

        throw new RuntimeException("No layer with fpga id == " + fpgaId);
    }

    private EngineInterface interfaceDefault () {
        EngineInterface ei = new EngineInterface();

        InterfaceParam N = ei.addParam("N", CPUTypes.UINT64);
        InterfaceParam init = ei.addParam("init", CPUTypes.UINT8);

        for (int i = 0 ; i < computationChains.size() ; i++) {
            computationChains[i].setKernelTimings(ei, N, init);
        }
        if (nullSink != null) {
            ei.setTicks(nullSink.getName(), 0);
        }
        if (nullSource != null) {
            ei.setTicks(nullSource.getName(), 0);
        }

        Parameters.LayerParameter firstLayer = networkParameters.getLayer(0);
        Parameters.LayerParameter lastLayer = networkParameters.getLayer(
                networkParameters.getLayerCount() - 1);
        int inputSize = Utils.layerInputDimension(firstLayer).totalSize();
        int outputSize = Utils.layerOutputDimension(lastLayer).totalSize();

        if (fpgaId == 0) {
            // load from CPU:
            //   ei.setStream("fromcpu", CPUTypes.FLOAT, N * inputSize * CPUTypes.FLOAT.sizeInBytes());
            //

            // load from LMem
            InterfaceParam addressIn = ei.addParam("addressIn", CPUTypes.UINT64);
            final int numberSize =
                bitstreamId == 0
                ? CPUTypes.FLOAT.sizeInBytes()
                : CPUTypes.UINT16.sizeInBytes();
            System.out.println("input size per image = " + inputSize * numberSize);
            InterfaceParam arrSize = N * inputSize * numberSize;

            ei.setLMemLinearWrapped(
                    "fromcpu",           /* streamName  - This name is
                                                          called as such for
                                                          legacy reasons */
                    addressIn,           /* address - base address in off-
                                                      chip memory. */
                    arrSize,             /* arrSize - the size in bytes of
                                                      the array. */
                    arrSize,             /* rwSize - the actual size to
                                                     be read/writen. */
                    ei.addConstant(0l)); /* offset */
        }

        if (fpgaId == getNumFpgaUsedInBitstream() - 1) {
            // writeback to cpu
            // ei.setStream("tocpu", CPUTypes.FLOAT, N * outputSize * CPUTypes.FLOAT.sizeInBytes());

            // load from lmem
            InterfaceParam addressOut = ei.addParam("addressOut", CPUTypes.UINT64);
            final int numberSize =
                (bitstreamId == getNumBitstream() - 1)
                ? CPUTypes.FLOAT.sizeInBytes()
                : CPUTypes.UINT16.sizeInBytes();
            System.out.println("output size per image = " + outputSize * numberSize);
            InterfaceParam arrSize = N * outputSize * numberSize;

            ei.setLMemLinearWrapped(
                    "tocpu",           /* streamName  - This name is
                                                          called as such for
                                                          legacy reasons */
                    addressOut,           /* address - base address in off-
                                                      chip memory. */
                    arrSize,             /* arrSize - the size in bytes of
                                                      the array. */
                    arrSize,             /* rwSize - the actual size to
                                                     be read/writen. */
                    ei.addConstant(0l)); /* offset */

        }

        if (isSimulation) {
            System.out.println("Num bitstreams = " + getNumBitstream());
            System.out.println("bitstreamId = " + bitstreamId);
            System.out.println("fpgaId = " + fpgaId);
            if (fpgaId > 0) {
                ei.setStream("mock_maxring_in", CPUTypes.UINT8, 2 * N * getFpgaInputSize());
                System.out.println("mock maxring in = " + getFpgaInputSize());
            }

            if (fpgaId < getNumFpgaUsedInBitstream() - 1) {
                ei.setStream("mock_maxring_out", CPUTypes.UINT8, 2 * N * getFpgaOutputSize());
                System.out.println("mock maxring out = " + getFpgaOutputSize());
            }
        }

        // configuring streams for ConvolutionLayers.
        for (int i = 0, j = 0; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layerParams = networkParameters.getLayer(i);

            if (layerParams.getFpgaId() != fpgaId) {
                continue;
            }

            if (isConvLayer(layerParams)) {
                computationChains[j].setScalar(ei, "init", init);
                for (Tuple3<String, DFELink, Integer> link : computationChains[j].getInitializerInputs()) {
                    ei.setStream(
                            link.getFirst(),
                            CPUTypes.UINT16,
                            init ? link.getThird() * 2 : 0);
                }
                for (Tuple3<String, DFELink, Integer> link : computationChains[j].getLMemInputs()) {
                    /* Third is stream size perPixel */
                    int arrSize = link.getThird() * CPUTypes.UINT16.sizeInBytes();
                    InterfaceParam rwSize =
                            layerParams.getOutputHeight() * layerParams.getOutputWidth()
                            / layerParams.getConv().getLookAhead()
                            * N * arrSize;
                    System.out.println(
                            "Address base = " + layerParams.getConv().getWeightAddressBase());
                    ei.setLMemLinearWrapped(
                            link.getFirst(),                       /* streamName */
                            ei.addConstant(layerParams.getConv().getWeightAddressBase()), /* address */
                            ei.addConstant(arrSize), /* arrSize */
                            rwSize,                   /* rwSize */
                            ei.addConstant(0l)                     /* offset */
                    );
                }

            } else if (isLrnLayer(layerParams)) {
                InterfaceParam approx_factor = ei.addParam(
                        "approx_factor_" + layerParams.getLayerId(), CPUTypes.FLOAT);
                InterfaceParam approx_left = ei.addParam(
                        "approx_left_" + layerParams.getLayerId(), CPUTypes.FLOAT);
                computationChains[j].setScalar(ei, "approx_factor", approx_factor);
                computationChains[j].setScalar(ei, "approx_left", approx_left);

            }

            j++;
        }

        ei.ignoreAll(Direction.IN_OUT);
        return ei;
    }

    private void setupKernels() {
        for (int i = 0 ; i < networkParameters.getLayerCount() ; i++) {
            Parameters.LayerParameter layer = networkParameters.getLayer(i);

            if (layer.getFpgaId() != fpgaId) {
                continue;
            }
            if (isConvLayer(layer)) {
                computationChains.add(new ConvolutionLayer(layer, this));
            } else if (isPoolLayer(layer)) {
                computationChains.add(new PoolingLayer(layer, this));
            } else if (isLrnLayer(layer)) {
                computationChains.add(new LrnLayer(layer, this));
            } else {
                throw new RuntimeException("Unknown layer!");
            }
        }
    }

    int ringConnectionCtr = 0;

    private Max4MAIARingConnection inputRingConnection() {
        if (fpgaId == 0) {
            throw new RuntimeException("Input ring wrong");
        }

        if (fpgaId % 2 == 0) {
            return Max4MAIARingConnection.MAXRING_B;
        } else {
            return Max4MAIARingConnection.MAXRING_A;
        }
    }

    private Max4MAIARingConnection outputRingConnection() {
        if (fpgaId == getNumFpgaUsedInBitstream() - 1) {
            throw new RuntimeException("Output ring connection.");
        }

        if (fpgaId % 2 == 0) {
            return Max4MAIARingConnection.MAXRING_A;
        } else {
            return Max4MAIARingConnection.MAXRING_B;
        }
    }

    private void linkKernels() {

        /* Data tranfer */
        DFELink fromLink;
        DFELink toLink;

        System.out.println("Linking kernels");
        if (isSimulation) {
            System.out.println("Simulation - mocking max ring input and outputs.");
        } else {
            System.out.println("Creating real maxring links");
        }

        if (fpgaId == 0) {
            fromLink = lmem.addStreamFromLMem(
                    "fromcpu",
                    LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        } else {
            if (isSimulation) {
                fromLink = addStreamFromCPU("mock_maxring_in");

            } else {
                MaxRingBidirectionalStream maxRingStream = addMaxRingBidirectionalStream(
                        "source_stream", inputRingConnection());
                fromLink = maxRingStream.getLinkFromRemoteDFE();
                nullSource = new NullSourceKernel(makeKernelParameters("null_source"));
                maxRingStream.getLinkToRemoteDFE() <== addKernel(nullSource).getOutput("source");

            }
        }

        if (fpgaId == getNumFpgaUsedInBitstream() - 1) {
            toLink = lmem.addStreamToLMem(
                    "tocpu", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        } else {
            if (isSimulation) {
                toLink = addStreamToCPU("mock_maxring_out");

            } else {
                MaxRingBidirectionalStream maxRingStream = addMaxRingBidirectionalStream(
                        "dest_stream", outputRingConnection());
                toLink = maxRingStream.getLinkToRemoteDFE();
                nullSink = new NullSinkKernel(makeKernelParameters("null_sink"));
                addKernel(nullSink).getInput("sink") <== maxRingStream.getLinkFromRemoteDFE();

            }
        }

        /* Kernel logic transfer */
        DFELink prevOutput = fromLink;

        for (int i = 0 ; i < computationChains.size() ; i++) {
            computationChains[i].getInput() <== prevOutput;
            prevOutput = computationChains[i].getOutput();
        }
        toLink <== prevOutput;

        /* Weight initialization.
         * NOTE: Not sure if RAM is shared or not..
         */
        for (int i = 0 ; i < computationChains.size() ; i++) {
            for (Tuple3<String, DFELink, Integer> link : computationChains[i].getInitializerInputs()) {
                DFELink dataStream = addStreamFromCPU(link.getFirst());
                link.getSecond() <== dataStream;
            }

            for (Tuple3<String, DFELink, Integer> link : computationChains[i].getLMemInputs()) {
                DFELink dataStream = lmem.addStreamFromLMem(
                        link.getFirst(),
                        LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
                link.getSecond() <== dataStream;
            }
        }

        /* Weights initialization. */
        if (true) {
            DFELink cpu2lmem = lmem.addStreamToLMem(
                    "cpu2lmem", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
            DFELink dataIn = addStreamFromCPU("data_in");
            cpu2lmem <== dataIn;
        }

        if (true) {
            DFELink lmem2cpu = lmem.addStreamFromLMem(
                    "lmem2cpu", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
            DFELink dataOut = addStreamToCPU("data_out");
            dataOut <== lmem2cpu;
        }
    }

    public NetworkManager(
            GenericNetworkBuilder.NetworkEngineParameters engineParameters,
            Parameters.Network networkParametersIn,
            int argBitstreamId,
            int argFpgaId) {
        super(engineParameters);
        fpgaId = argFpgaId;
        bitstreamId = argBitstreamId;
        networkParameters = networkParametersIn;
        computationChains = new ArrayList<ComputationChain>();
        lmem = null;
        isSimulation = engineParameters.getTarget().toString().trim().equals("DFE_SIM");

        config.setAllowNonMultipleTransitions(true);
        debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));
        config.setDefaultStreamClockFrequency(networkParameters.getFrequency());
        System.out.println("Network compilation target:");
        System.out.println(networkParameters.toString());
        System.out.println("Frequency = " + networkParameters.getFrequency());
        if (isSimulation) {
            System.out.println("Compiling for simulation");
        } else {
            System.out.println("Compiling for actual DFE");
        }

        // initialise interface to off-chip memory
        if (lmem == null) {
            // begin of VERSION 2018.1
            // lmem = addLMemInterface(makeLMemConfig().setDataFIFODepth(32));
            // end of VERSION 2018.1

            // begin of VERSION 2015.2
            MemoryControllerConfig config = new MemoryControllerConfig();
            config.setDataFIFODepth(32);
            config.setDataFifoImplementUsingLUTRAM(true);
            lmem = addLMemInterface();
            lmem.setMemoryControllerConfig(config);
            // end of VERSION 2015.2
        }

        setupKernels();
        linkKernels();

        /* Interfaces */
        createSLiCinterface(interfaceDefault());

        // TODO: Move these two interfaces to a difference maxfiles?
        if (bitstreamId == 0 && fpgaId == 0) {
            createSLiCinterface(interfaceWrite("writeLMem"));
            createSLiCinterface(interfaceRead("readLMem"));
        }
    }
}
