package fpgaconvnet;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import java.lang.AssertionError;
import java.util.ArrayList;
import java.util.List;

import maxpower.ops.AssociativeOp;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

import fpgaconvnet.protos.Parameters;


public class Utils {
    public static int divCeil(int a, int b) {
        if (a % b == 0) {
            return a / b;
        } else {
            return a / b + 1;
        }
    }

    public static double[] toDoubleArray(float [] a) {
        double [] ret = new double[a.length];
        for (int i = 0 ; i < a.length ; i++) {
            ret[i] = a[i];
        }
        return ret;
    }

    public static double[][] toDoubleArray(float [][] a) {
        double [][] ret = new double[a.length][];
        for (int i = 0 ; i < a.length ; i++) {
            ret[i] = new double[a[i].length];
            for (int j = 0 ; j  < a[i].length ; j++) {
                ret[i][j] = a[i][j];
            }
        }
        return ret;
    }

    public static DFEVar[] unrollArray(DFEVar[][] a) {
        int totalElements = 0;
        int ctr = 0;

        for (int i = 0 ; i < a.length ; i++) {
            for (int j= 0 ; j < a[i].length ; j++) {
                totalElements++;
            }
        }

        DFEVar[] ret = new DFEVar[totalElements];

        for (int i = 0 ; i < a.length ; i++) {
            for (int j = 0 ; j < a[i].length ; j++) {
                ret[ctr] = a[i][j];
                ctr++;
            }
        }

        return ret;
    }

    public static float[] unrollArray(float [][] a) {
        int totalElements = 0;
        int ctr = 0;

        for (int i = 0 ; i < a.length ; i++) {
            for (int j= 0 ; j < a[i].length ; j++) {
                totalElements++;
            }
        }

        float[] ret = new float[totalElements];

        for (int i = 0 ; i < a.length ; i++) {
            for (int j = 0 ; j < a[i].length ; j++) {
                ret[ctr] = a[i][j];
                ctr++;
            }
        }

        return ret;
    }

    public static double[] unrollArray(double[][] a) {
        int totalElements = 0;
        int ctr = 0;

        for (int i = 0 ; i < a.length ; i++) {
            for (int j= 0 ; j < a[i].length ; j++) {
                totalElements++;
            }
        }

        double[] ret = new double[totalElements];

        for (int i = 0 ; i < a.length ; i++) {
            for (int j = 0 ; j < a[i].length ; j++) {
                ret[ctr] = a[i][j];
                ctr++;
            }
        }

        return ret;
    }

    public static DFEVar treeReduceAdd(List<DFEVar> l) {
        return TreeReduce.reduce(new AssociativeOp<DFEVar>() {
            @Override
            public DFEVar op(DFEVar a, DFEVar b) { return a + b; }
        }, l);
    }


    public static DFEVar logarithmAdderTree(DFEVar[] arr) {
        if (arr.length == 1) {
            return arr[0];
        }

        int mid = arr.length / 2;
        DFEVar[] left = new DFEVar[mid];
        DFEVar[] right = new DFEVar[arr.length - mid];

        for (int i = 0 ; i < mid ; i++) {
            left[i] = arr[i];
        }

        for (int i = mid ; i < arr.length ; i++) {
            right[i - mid] = arr[i];
        }

        return logarithmAdderTree(left) + logarithmAdderTree(right);
    }

    public static DFEVar logarithmAdderTree(List<DFEVar> l) {
        return logarithmAdderTree(l.toArray(new DFEVar[l.size()]));
    }

    public static int ceilLog2(int a) {
        int highest = 0;
        int numSet = 0;

        for (int i = 0 ; i < 32 ; i++) {
            if (((a >> i) & 1) == 1) {
                numSet++;
                highest = i;
            }
        }

        if (numSet == 1) {
            return highest;
        } else {
            return highest + 1;
        }
    }

    public boolean isPerfectSquare(int x) {
        int a = (int) Math.sqrt(x);
        return a * a == x;
    }

    public static float[][] transpose(float[][] mat) {
        int r = mat.length;
        int c = mat[0].length;
        float[][] ret = new float[c][r];

        for (int i = 0 ; i < r ; i++) {
            for (int j = 0 ; j < c ; j++) {
                ret[j][i] = mat[i][j];
            }
        }

        return ret;
    }

    public static float[][] dupMatrix(float[][] mat) {
        float[][] ret = new float[mat.length][mat[0].length];

        for (int i = 0 ; i < mat.length ; i++) {
            for (int j= 0 ; j < mat[i].length ;j++) {
                ret[i][j] = mat[i][j];
            }
        }

        return ret;
    }

    public static <T> List<T> dupList(List<T> a, T... b) {
        List<T> ret = new ArrayList<T>();

        for (int i = 0; i < a.size() ; i++) {
            ret.add(a[i]);
        }

        for (int i = 0; i < b.length ; i++) {
            ret.add(b[i]);
        }

        return ret;
    }

    public static int sum (int [] a) {
        int s = 0;
        for (int i = 0 ; i < a.length ; i++) {
            s = s + a[i];
        }
        return s;
    }

    public static Bits negate(Bits x) {
        Bits y = Bits.allZeros(x.getWidth());;

        for (int i = 0 ; i < x.getWidth() ; i++) {
            y.setBit(i, !x.getBit(i));
        }

        int idx = 0;

        do {
            if (y.getBit(idx)) {
                y.setBit(idx, false);
            } else {
                y.setBit(idx, true);
                break;
            }
            idx += 1;
        } while (idx < x.getWidth());

        return y;
    }

    public static Bits doubleToBits(double arg) {
        double x = Math.abs(arg);
        Bits ret = Bits.allZeros(GlobalConfig.fracBits + GlobalConfig.intBits);

        double top = Math.pow(2, GlobalConfig.intBits - 2);

        for (int i = GlobalConfig.fracBits + GlobalConfig.intBits - 2 ; i >= 0; i--) {
            if (top < x) {
                x = x - top;
                ret.setBit(i, true);
            }

            top = top / 2;
        }

        // Handle negative case
        if (arg < 0) {
           return negate(ret); 
        }

        return ret;
    }

    public static double bitsToDouble(Bits bits) {
        double ret = 0.0;
        double tmp = 0.5;

        for (int i = GlobalConfig.fracBits - 1; i >= 0; i--) {
            if (bits.getBit(i)) {
                ret += tmp;
            }

            tmp = tmp / 2;
        }

        tmp = 1;
        for (int i = 0 ; i < GlobalConfig.intBits - 1 ; i++) {
            if (bits.getBit(i + GlobalConfig.fracBits)) {
                ret += tmp;
            }

            tmp *= 2;
        }

        if (bits.getBit(GlobalConfig.intBits + GlobalConfig.fracBits - 1)) {
            double mostNegative = -Math.pow(2, GlobalConfig.intBits - 1);
            return mostNegative + ret;
        }

        return ret;
    }

    public static Bits subBits(Bits bits, int start, int len) {
        Bits ret = Bits.allZeros(len);

        for (int i = 0 ; i < len ; i++) {
            if (bits.getBit(start + i)) {
                ret.setBit(i, true);
            }
        }

        return ret;
    }

    public static void printBits(Bits x) {
        for (int i = 0 ; i < x.getWidth() ; i++) {
            System.out.print(x.getBit(i) ? 1 : 0);
        }
        System.out.println("");
    }

    public static Bits concatBits(Bits[] bitsArr) {
        int width = 0;
        for (int i = 0;  i < bitsArr.length ; i++) {
            width += bitsArr[i].getWidth();
        }

        Bits ret = Bits.allZeros(width);

        int idx = 0;

        for (int i = 0 ; i < bitsArr.length ; i++) {
            for (int j = 0 ; j < bitsArr[i].getWidth() ; j++) {
                ret.setBit(idx, bitsArr[i].getBit(j));
                idx++;
            }
        }

        return ret;
    }

    public static DFEVar chainCounterOrZero(
            Kernel kernel,
            CounterChain chain,
            int total) {
        final int inc = 1;

        if (total != 1) {
            return chain.addCounter(total, inc);
        }

        return kernel.constant.var(Kernel.dfeUInt(1), 0);
    }

    public static DFEVar simpleCounter(KernelLib k, DFEVar x, int inc) {
        CounterChain chain = k.control.count.makeCounterChain();
        return chain.addCounter(x, inc);
    }

    public static void assertTrue(boolean flag) {
        assertTrue(flag, "assertion failed!");
    }

    public static void assertTrue(boolean flag, String message) {
        if (!flag) {
            throw new AssertionError(message);
        }
    }

    public static String readFile(String fileName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        try {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append("\n");
                line = br.readLine();
            }
            return sb.toString();
        } finally {
            br.close();
        }
    }

    public static Dimension layerOutputDimension(Parameters.LayerParameter layer) {
        return new Dimension(layer.getOutputHeight(), layer.getOutputWidth(), layer.getNumOutputs());
    }

    public static Dimension layerInputDimension(Parameters.LayerParameter layer) {
        return new Dimension(layer.getInputHeight(), layer.getInputWidth(), layer.getNumInputs());
    }
}
