import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;


public class SceneAnalysisManager extends CustomManager {
    private final int inputHeight = 320;
    private final int inputWidth = 240;
    private final int inputChannels = 3;


    private ConvolutionParameters conv1Params;
    private ConvolutionParameters conv2Params;
    private ConvolutionParameters conv3Params;
    private PoolingParameters pool1Params;
    private PoolingParameters pool2Params;
    private ConvolutionLayer conv1Layer, conv2Layer, conv3Layer;
    private PoolingLayerKernel pool1Kernel, pool2Kernel;
    private DfeInputAlligner inputAllignerKernel;
    private DfeOutputAlligner outputAllignerKernel;
    
    public Dimension outputDimension() {
        return pool2Params.outputDimension;
    }

    public Dimension inputDimension() {
        return conv1Params.inputDimension();
    }

    public PoolingParameters loadPool1Parameters() {
        conv1Params.outputDimension().print();
        return new PoolingParameters(
                conv1Params.outputDimension(),
                2,
                PoolingUnit.Type.Max);
    }

    public PoolingParameters loadPool2Parameters() {
        return new PoolingParameters(
                conv2Params.outputDimension(),
                2,
                PoolingUnit.Type.Max);

    }

    // TODO(fyq14): Get actual trained model values for this instead of random ones.
    private static List<Float> getConvBias(int outputChannels) {
        List<Float> ret = new ArrayList<Float>();

        for (int i = 0 ; i < outputChannels ; i++) {
            ret.add((float) (0.02 * (Math.random() - 0.5)));
        }

        return ret;
    }

    // TODO(fyq14): Get actual trained model values for this instead of random ones.
    private static List<List<float[][]>> getConvWeights(
            int outputChannels, int inputChannels, int kernelDim) {

        List<List<float[][]>> ret = new ArrayList<List<float[][]>>();

        for (int o = 0 ; o < outputChannels ; o++) {
            List<float[][]> arr = new ArrayList<float[][]>();

            for (int i = 0 ; i < inputChannels ; i++) {
                float[][] weights = new float[kernelDim][kernelDim];

                for (int r = 0 ; r < kernelDim ; r++) {
                    for (int c = 0 ; c < kernelDim ; c++) {
                        weights[r][c] = (float) (0.02 * (Math.random() - 0.5));
                    }
                }

                arr.add(weights);
            }

            ret.add(arr);
        }

        return ret;
    }

    public ConvolutionParameters loadConv1Parameters(
            int convUnitFoldingFactor, int kernelFoldingFactor) {

        int kernelDim = 7;
        int outputChannels = 16;
        int inputChannels = 3;

        ConvolutionParameters convParams = new ConvolutionParameters(
            new Dimension(inputHeight, inputWidth, inputChannels),
            outputChannels,
            getConvWeights(outputChannels, inputChannels, kernelDim),
            getConvBias(outputChannels)
        );

        convParams.kernelFoldingFactor = kernelFoldingFactor;
        convParams.foldingFactor = convUnitFoldingFactor;

        return convParams;
    }

    public ConvolutionParameters loadConv2Parameters(
            int convUnitFoldingFactor, int kernelFoldingFactor) {

        int kernelDim = 7;
        int outputChannels = 64;
        int inputChannels = 16;

        ConvolutionParameters convParams = new ConvolutionParameters(
            pool1Params.outputDimension,
            outputChannels,
            getConvWeights(outputChannels, inputChannels, kernelDim),
            getConvBias(outputChannels)
        );

        convParams.kernelFoldingFactor = kernelFoldingFactor;
        convParams.foldingFactor = convUnitFoldingFactor;

        return convParams;
    }

    public ConvolutionParameters loadConv3Parameters(
            int convUnitFoldingFactor, int kernelFoldingFactor) {

        int kernelDim = 7;
        int outputChannels = 256;
        int inputChannels = 64;

        ConvolutionParameters convParams = new ConvolutionParameters(
            pool1Params.outputDimension,
            outputChannels,
            getConvWeights(outputChannels, inputChannels, kernelDim),
            getConvBias(outputChannels)
        );

        convParams.kernelFoldingFactor = kernelFoldingFactor;
        convParams.foldingFactor = convUnitFoldingFactor;

        return convParams;
    }

    public SceneAnalysisManager (EngineParameters engineParameters) {
        super(engineParameters);

        int conv1Factor = 0;
        int conv1KernelFactor = 0;
        int conv2Factor = 0;
        int conv2KernelFactor = 0;
        int conv3Factor = 0;
        int conv3KernelFactor = 0;
        int defaultFrequency = 0;

        try {
            Properties prop = new Properties();
            //load a properties file from class path, inside static method
            InputStream input = new FileInputStream("../scene_params/config.properties");
            prop.load(input);

            //get the property value and print it out
            conv1Factor = Integer.parseInt(prop.getProperty("conv1Factor"));
            conv1KernelFactor = Integer.parseInt(prop.getProperty("conv1KernelFactor"));
            conv2Factor = Integer.parseInt(prop.getProperty("conv2Factor"));
            conv2KernelFactor = Integer.parseInt(prop.getProperty("conv2KernelFactor"));
            conv3Factor = Integer.parseInt(prop.getProperty("conv3Factor"));
            conv3KernelFactor = Integer.parseInt(prop.getProperty("conv3KernelFactor"));
            defaultFrequency = Integer.parseInt(prop.getProperty("frequency"));

            input.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.exit(-1);
        }

        System.out.println("conv1Factor = " + conv1Factor);
        System.out.println("conv1KernelFactor = " + conv1KernelFactor);
        System.out.println("conv2Factor = " + conv2Factor);
        System.out.println("conv2KernelFactor = " + conv2KernelFactor);
        System.out.println("conv3Factor = " + conv3Factor);
        System.out.println("conv3KernelFactor = " + conv3KernelFactor);
        System.out.println("Default frequency = " + defaultFrequency);

        config.setDefaultStreamClockFrequency(defaultFrequency);

        conv1Params = loadConv1Parameters(conv1Factor, conv1KernelFactor);
        pool1Params = loadPool1Parameters();
        conv2Params = loadConv2Parameters(conv2Factor, conv2KernelFactor);
        pool2Params = loadPool2Parameters();
        conv3Params = loadConv3Parameters(conv3Factor, conv3KernelFactor);

        inputAllignerKernel = new DfeInputAlligner(
                makeKernelParameters("DfeInputAlligner"), inputChannels);
        conv1Layer = new ConvolutionLayer(conv1Params, this);
        pool1Kernel = new PoolingLayerKernel (
                makeKernelParameters("pool1"), pool1Params);
        conv2Layer = new ConvolutionLayer(conv2Params, this);
        pool2Kernel = new PoolingLayerKernel (
                makeKernelParameters("pool2"), pool2Params);
        conv3Layer = new ConvolutionLayer(conv3Params, this);
        outputAllignerKernel = new DfeOutputAlligner(
                makeKernelParameters("DfeOutputAlligner"),
                conv3Params.outputDimension().channels());

        // TODO(fyq14): Make a PoolingLayer abstraction for PoolingKernel.
        KernelBlock inputAllignerBlock = addKernel(inputAllignerKernel);
        KernelBlock pool1Block = addKernel(pool1Kernel);
        KernelBlock pool2Block = addKernel(pool2Kernel);
        KernelBlock outputAllignerBlock = addKernel(outputAllignerKernel);

        DFELink cpuInputLink = addStreamFromCPU("x");
        DFELink cpuOutputLink = addStreamToCPU("y");

        inputAllignerBlock.getInput("x") <== cpuInputLink;
        conv1Layer.getInput() <== inputAllignerBlock.getOutput("y");
        pool1Block.getInput("x") <== conv1Layer.getOutput();
        conv2Layer.getInput() <== pool1Block.getOutput("y");
        pool2Block.getInput("x") <== conv2Layer.getOutput();
        conv3Layer.getInput() <== pool2Block.getOutput("y");
        outputAllignerBlock.getInput("x") <== conv3Layer.getOutput();
        cpuOutputLink <== outputAllignerBlock.getOutput("y");
    }

    public EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();
        CPUTypes   type = CPUTypes.FLOAT;
        int        size = type.sizeInBytes();
        InterfaceParam  N    = ei.addParam("N", CPUTypes.INT);

        ei.setTicks("DfeInputAlligner", N * inputDimension().totalSize());
        conv1Layer.setKernelTimings(ei, N);
        ei.setTicks("pool1", N * pool1Kernel.cyclesPerImage());
        conv2Layer.setKernelTimings(ei, N);
        ei.setTicks("pool2", N * pool2Kernel.cyclesPerImage());
        conv3Layer.setKernelTimings(ei, N);
        ei.setTicks("DfeOutputAlligner", N * outputDimension().totalSize());

        ei.setStream("x", type, N * inputDimension().totalSize() * size);
        ei.setStream("y", type, N * outputDimension().totalSize() * size);

        return ei;
    }
}
