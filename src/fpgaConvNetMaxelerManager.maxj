// package nothing;

import java.io.IOException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class fpgaConvNetMaxelerManager {
    public static void resource_bench(String[] args) {
        ResourceBenchmarkParameters params = new ResourceBenchmarkParameters(args);
        ResourceBenchmarkManager manager = new ResourceBenchmarkManager(
            params,
            params.getConvFoldingFactor(),
            params.getKernelFoldingFactor()
        );
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;
        config.setDefaultStreamClockFrequency(25);

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void le_net(String[] args) {
        EngineParameters params = new EngineParameters(args);
        LeNetManager manager = new LeNetManager(params);
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void test(String[] args) {
        Result result = JUnitCore.runClasses(TestPoolingLayerKernel.class);


        if (result.wasSuccessful()) {
            System.out.println("Sucessful!");
        } else {
            System.out.println("Error");
            for (Failure failure : result.getFailures()) {
                System.out.println(failure.toString());
            }
        }

    }

    public static void main(String[] args) {
        String[] x = new String[args.length - 1];

        for (int i = 1 ; i < args.length ; i++) {
            x[i-1] = args[i];
        }

        if      (args[0].equals("resource_bench")) resource_bench(x);
        else if (args[0].equals("test")) test(x);
        else if (args[0].equals("le_net")) le_net(x);
    }

}

