// package nothing;

import org.junit.runner.JUnitCore;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import org.junit.runner.JUnitCore;
import org.junit.runner.Request;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import java.util.List;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class fpgaConvNetMaxelerManager {
    public static void resource_bench(String[] args) {
        ResourceBenchmarkParameters params = new ResourceBenchmarkParameters(args);
        ResourceBenchmarkManager manager = new ResourceBenchmarkManager(
            params,
            params.getConvFoldingFactor(),
            params.getKernelFoldingFactor()
        );
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;
        config.setDefaultStreamClockFrequency(25);

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void le_net(String[] args) {
        EngineParameters params = new EngineParameters(args);
        LeNetManager manager = new LeNetManager(params);
        BuildConfig buildConfig = manager.getBuildConfig();
        buildConfig.setBuildEffort(BuildConfig.Effort.VERY_HIGH);
        buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
        buildConfig.setMPPRParallelism(params.getMPPRThreads());
        buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

        CustomManager.Config config = manager.config;

        manager.createSLiCinterface(manager.interfaceDefault());
        manager.build();
    }

    public static void test(String[] args) {
        Class<?>[] klasses;
        TestParameters params = new TestParameters(args);
        List<TestParameters.Arg> testKlasses =
                TestParameters.parseKlassArg(params.getTestKlass());
        String[] methodNames = new String[1];  // to make javac happy

        if (testKlasses.size() == 0) {
            klasses = new Class<?>[]{
                TestPoolingLayerKernel.class
            };

            methodNames = new String[klasses.length];
            for (int i =0 ; i < klasses.length ; i++) {
                methodNames[i] = "";
            }

        } else {
            klasses = new Class<?>[testKlasses.size()];
            methodNames = new String[testKlasses.size()];

            for (int i = 0 ; i < testKlasses.size() ; i++) {
                TestParameters.Arg test = testKlasses[i];
                methodNames[i] = test.method;
                try {
                    Class<?> act = Class.forName(test.klass);
                    klasses[i] = act;
                } catch (ClassNotFoundException e) {
                    System.out.println("Class " + test.klass + " not found!");
                    System.exit(-1);
                }
            }
        }

        for (int i = 0 ; i < klasses.length ; i++) {
            Result result;

            if (methodNames[i].equals("")) {
                result = JUnitCore.runClasses(klasses);
            } else {
                Request request = Request.method(klasses[i], methodNames[i]);
                result = new JUnitCore().run(request);
            }

            if (result.wasSuccessful()) {
                System.out.println("Sucessful!");
            } else {
                System.out.println("Test failures:");
                for (Failure failure : result.getFailures()) {
                    System.out.println(failure.toString());
                }
            }
        }
    }

    public static void main(String[] args) {
        String[] x = new String[args.length - 1];

        for (int i = 1 ; i < args.length ; i++) {
            x[i-1] = args[i];
        }

        if      (args[0].equals("resource_bench")) resource_bench(x);
        else if (args[0].equals("test")) test(x);
        else if (args[0].equals("le_net")) le_net(x);
    }

}

