// package nothing;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class PartitionedDemux extends OneHotDemux {
    protected DFEVar[] counters;

    protected int sum(int[] counts) {
        int x = 0;
        for (int i = 0 ; i < counts.length ; i++) {
            x += counts[i];
        }
        return x;
    }

    protected int[] accumulate(int x[]) {
        int[] arr = new int[x.length];

        if (x.length == 0) {
            return arr;
        }
        arr[0] = x[0];

        for (int i = 1 ; i < x.length ; i++) {
            arr[i] = arr[i-1] + x[i];
        }

        return arr;
    }

    public PartitionedDemux(Kernel argKernel, int[] counts, int tickDelay) {
        super(argKernel, counts.length);
        int total = sum(counts);
        int[] cumulative = accumulate(counts);

        CounterChain chain = control.count.makeCounterChain();
        DFEVar ctr = chain.addCounter(total, 1);

        if (tickDelay > 1) {
            chain.addCounter(tickDelay, 1);
        }

        for (int i = 0 ; i < counts.length ; i++) {
            if (i == 0) {
                setSelect(i, ctr < cumulative[i]);
            } else {
                setSelect(i, (cumulative[i-1] <= ctr) & (ctr < cumulative[i]));
            }
        }
    }
}
