import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;

/* 
 * io.input:
 *  x : DFEVector[inputChannels] 
 * io.output:
 *  - y0, y1, y2, ...., y{foldingFactor - 1}
 *  - w0, w1, w2, ...., w{foldingFactor - 1}
 *  Bias will be handled at a later stage of the pipeline.
 *  where y_i and p_i are both inputs to ConvolutionUnit_i
 *        and are of type DFEVector[kerenlDim]
 *        (they are both sliding windows of the input streams
 *         and the convolution parameters respectively.)
 */

public class ConvolutionSchedulerKernel extends Kernel {
    private final DFEVectorType<DFEVar> inputVectorType, outputVectorType;
    private final SlidingWindow[] slidingWindows;
    private final DFEVector<DFEVar> input;
    private final List<DFEVector<DFEVar>> output_w, output_y;
    private final Dimension inputDimension;
    private final int foldingFactor, kernelDim, nOutput, loopIterations;
    private final DFEVar row, col;
    private final List<List<float[][]>> convolutionWeights;
    private final CounterChain masterChain;
    private final List<ConvChannelIndex> convChannelIndices;

    public ConvolutionSchedulerKernel(
           KernelParameters kp,
           ConvolutionParameters params) {
        super(kp);

        inputDimension = params.inputDim;
        kernelDim = params.kernelDim;
        nOutput = params.outputChannels;
        foldingFactor = params.foldingFactor;
        convolutionWeights = params.getKernels();
        loopIterations = params.loopIterations();
        masterChain = control.count.makeCounterChain();
        inputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType,
                inputDimension.channels());
        outputVectorType = new DFEVectorType<DFEVar>(
                GlobalConfig.dataType,
                kernelDim * kernelDim);
        input = inputVectorType.newInstance(this);
        output_w = new ArrayList<DFEVector<DFEVar>>();
        output_y = new ArrayList<DFEVector<DFEVar>>();;
        convChannelIndices = ConvChannelIndex.rangeProduct(
                nOutput, inputDimension.channels());
        slidingWindows = new SlidingWindow[inputDimension.channels()];

        for (int i = 0 ; i < foldingFactor; i++) {
            output_w.add(outputVectorType.newInstance(this));
            output_y.add(outputVectorType.newInstance(this));
        }

        row = Utils.chainCounterOrZero(
                this, masterChain, inputDimension.height());
        col = Utils.chainCounterOrZero(
                this, masterChain, inputDimension.width());

        initSlidingWindow();
        initOutputs();

        // TODO(fyquah): input and output control flags
        input <== io.input(getInputName(), inputVectorType);
        DFEVar outputControlFlag = isBorder();

        for (int i = 0 ; i < foldingFactor ; i++) {
            io.output(getWeightOutputName(i), output_w[i], outputVectorType, outputControlFlag);
            io.output(getPixelOutputName(i), output_y[i], outputVectorType, outputControlFlag);
        }
    }

    public String getInputName() {
        return "input";
    }

    public String getWeightOutputName(int convUnitId) {
        return "output_w_" + convUnitId;
    }

    public String getPixelOutputName(int convUnitId) {
        return "output_x_" + convUnitId;
    }

    protected DFEVar isBorder() {
        DFEVar flag = constant.var(dfeBool(), 0);
        for (int i = 0 ; i < (kernelDim - 1) / 2 ; i++) {
            flag = flag | row.eq(i) | col.eq(i)
                | row.eq(inputDimension.height() - 1 - i)
                | col.eq(inputDimension.width() - 1 - i);
        }

        return flag;
    }

    private void initSlidingWindow() {
        for (int i = 0 ; i < inputDimension.channels() ; i++) {
            slidingWindows[i] = new SlidingWindow(
                this,
                input[i],
                inputDimension.height(),
                inputDimension.width(),
                kernelDim,
                new OffsetExpr(1));
        }
    }

    private void initOutputs() {
        DFEVar iter = control.count.simpleCounter(loopIterations, 1);
        for (int i = 0 ; i < foldingFactor ; i++) {
            ArrayList<ConvChannelIndex> indices = getConvUnitChannelIndices(i);
            DFEVector<DFEVar> convWeights = toMuxedWeight(iter, indices);
            DFEVector<DFEVar> convInputs = toMuxedPixel(iter, indices);
            output_w[i] <== convWeights;
            output_y[i] <== convInputs;
        }
    }

    protected ArrayList<ConvChannelIndex> getConvUnitChannelIndices(int convUnitId) {
        ArrayList<ConvChannelIndex> ret = new ArrayList<ConvChannelIndex>();

        for (int i = convUnitId * loopIterations ;
                i < (convUnitId + 1) * loopIterations && i < convChannelIndices.size();
                i++) {
            ret.add(convChannelIndices[i]);
        }

        return ret;
    }

    protected DFEVector<DFEVar> zeroVector(DFEVectorType<DFEVar> type) {
        DFEVector<DFEVar> newVector = type.newInstance(this);

        for (int i = 0 ; i < newVector.getSize() ; i++) {
            newVector[i] <== constant.var(GlobalConfig.dataType, 0);
        }

        return newVector;
    }

    protected DFEVector<DFEVar> toMuxedPixel(
            DFEVar iter,
            ArrayList<ConvChannelIndex> indices) {

        if (loopIterations == 1) {
            Utils.assertTrue(loopIterations == indices.size());
            return slidingWindows[indices[0].in].output;
        }

        ArrayList<DFEVector<DFEVar>> arr = new ArrayList<DFEVector<DFEVar>>();

        for (int i = 0 ; i < indices.size() ; i++) {
            arr.add(slidingWindows[indices[i].in].output);
        }

        while (arr.size() < loopIterations) {
            arr.add(zeroVector(outputVectorType));
        }

        return control.mux(iter, arr);
    }

    protected DFEVector<DFEVar> getConvWeightsVector(
            int outputChannel, int inputChannel) {
        DFEVector<DFEVar> vector = outputVectorType.newInstance(this);
        float[][] weights = convolutionWeights[outputChannel][inputChannel];

        for (int i = 0 ; i < kernelDim ; i++) {
            for (int j = 0 ; j < kernelDim ; j++) {
                vector[i * kernelDim + j] <== constant.var(
                        GlobalConfig.dataType, weights[i][j]);
            }
        }

        return vector;
    }

    protected DFEVector<DFEVar> toMuxedWeight(
            DFEVar iter,
            ArrayList<ConvChannelIndex> indices) {
        if (indices.size() == 1) {
            Utils.assertTrue(indices.size() == loopIterations);
            return getConvWeightsVector(indices[0].out, indices[0].in);
        }

        ArrayList<DFEVector<DFEVar>> choices = new ArrayList<DFEVector<DFEVar>>();

        for (int i = 0 ; i < indices.size() ; i++) {
            int out = indices[i].out;
            int in = indices[i].in;
            DFEVector<DFEVar> weightVector = outputVectorType.newInstance(this);

            for (int r = 0 ; r < kernelDim ; r++) {
                for (int c = 0 ; c < kernelDim ; c++) {
                    DFEVar w = constant.var(
                            GlobalConfig.dataType,
                            convolutionWeights[out][in][r][c]);
                    weightVector[i] <== w;
                }
            }

            choices.add(weightVector);
        }

        // unnecessary, but for completeness
        while (choices.size() < loopIterations) {
            choices.add(zeroVector(outputVectorType));
        }

        return control.mux(iter, choices);
    }
}
